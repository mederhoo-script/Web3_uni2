import{dy as h,_ as d,w as u,b as p,U as a,c as m,R as l}from"./index-CRXhB-tn.js";import{InjectedConnector as w}from"./thirdweb-dev-wallets-evm-connectors-injected.browser.esm-DxCOO08V.js";class C extends w{constructor(e){const n={...{name:"Magic Eden",shimDisconnect:!0,shimChainChangedDisconnect:!0,getProvider:h},...e.options};super({chains:e.chains,options:n,connectorStorage:e.connectorStorage}),d(this,"id",u.magicEden)}async connect(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const t=await this.getProvider();if(!t)throw new p;this.setupListeners(),this.emit("message",{type:"connecting"});let n=null;if(this.options?.shimDisconnect&&!this.connectorStorage.getItem(this.shimDisconnectKey)&&(n=await this.getAccount().catch(()=>null),!!n))try{await t.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}catch(r){if(this.isUserRejectedRequestError(r))throw new a(r)}if(!n){const s=await t.request({method:"eth_requestAccounts"});n=m(s[0])}let i=await this.getChainId(),o=this.isChainUnsupported(i);if(e.chainId&&i!==e.chainId)try{await this.switchChain(e.chainId),i=e.chainId,o=this.isChainUnsupported(e.chainId)}catch(s){console.error(`Could not switch to chain id : ${e.chainId}`,s)}this.options?.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const c={chain:{id:i,unsupported:o},provider:t,account:n};return this.emit("connect",c),c}catch(t){throw this.isUserRejectedRequestError(t)?new a(t):t.code===-32002?new l(t):t}}}export{C as MagicEdenConnector};
