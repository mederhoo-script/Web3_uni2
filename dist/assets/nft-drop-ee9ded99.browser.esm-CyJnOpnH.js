import{D as i}from"./QueryParams-32a56510.browser.esm-CJ0DYI-a.js";import{N as h,i as u,A as d,X as g,j as f,Y as C,B as o,k as y,l as w,m as n,T as p}from"./index-CRXhB-tn.js";import{C as W,a as A,G as T,b}from"./contract-appuri-5c40af52.browser.esm-iXrARNet.js";import{C as S}from"./contract-interceptor-d7b164a7.browser.esm-C_yNedqZ.js";import{C as E,D as R,a as k}from"./contract-owner-49e75547.browser.esm-BuMVgBnJ.js";import{C as N}from"./contract-platform-fee-e756e68f.browser.esm-4_O3c1A9.js";import{C as v}from"./contract-roles-71988d2e.browser.esm-CBnW-SmK.js";import{C as F}from"./contract-sales-918c7cb8.browser.esm-JshavvlF.js";import{D as I}from"./drop-claim-conditions-e6f2abbf.browser.esm-Dk2Ztl9z.js";import{S as U}from"./erc-721-standard-4c4125d2.browser.esm-D2l0mTLI.js";import{P as x}from"./thirdweb-checkout-f6974aaf.browser.esm-CMfSm83F.js";import"./index-CD3KUISV.js";import"./setErc20Allowance-7f76f677.browser.esm-DleMWaY1.js";import"./erc-721-27306550.browser.esm-CWT_rSOk.js";import"./assertEnabled-d1700f0b.browser.esm-CuId8uDg.js";import"./treeify-BwbAlYD3.js";class m extends U{static contractRoles=h;constructor(t,r,a){let e=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},s=arguments.length>4?arguments[4]:void 0,c=arguments.length>5?arguments[5]:void 0,l=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new u(t,r,s,e,a);super(l,a,c),this.abi=d.parse(s||[]),this.metadata=new W(this.contractWrapper,g,this.storage),this.app=new A(this.contractWrapper,this.metadata,this.storage),this.roles=new v(this.contractWrapper,m.contractRoles),this.royalties=new E(this.contractWrapper,this.metadata),this.sales=new F(this.contractWrapper),this.claimConditions=new I(this.contractWrapper,this.metadata,this.storage),this.encoder=new f(this.contractWrapper),this.estimator=new T(this.contractWrapper),this.events=new b(this.contractWrapper),this.platformFees=new N(this.contractWrapper),this.revealer=new R(this.contractWrapper,this.storage,C.name,()=>this.erc721.nextTokenIdToMint()),this.interceptor=new S(this.contractWrapper),this.owner=new k(this.contractWrapper),this.checkout=new x(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async totalSupply(){const[t,r]=await Promise.all([this.totalClaimedSupply(),this.totalUnclaimedSupply()]);return t.add(r)}async getAllClaimed(t){const r=o.from(t?.start||0).toNumber(),a=o.from(t?.count||i).toNumber(),e=Math.min((await this.contractWrapper.read("nextTokenIdToClaim",[])).toNumber(),r+a);return await Promise.all(Array.from(Array(e).keys()).map(s=>this.get(s.toString())))}async getAllUnclaimed(t){const r=o.from(t?.start||0).toNumber(),a=o.from(t?.count||i).toNumber(),e=o.from(Math.max((await this.contractWrapper.read("nextTokenIdToClaim",[])).toNumber(),r)),s=o.from(Math.min((await this.contractWrapper.read("nextTokenIdToMint",[])).toNumber(),e.toNumber()+a));return await Promise.all(Array.from(Array(s.sub(e).toNumber()).keys()).map(c=>this.erc721.getTokenMetadata(e.add(c).toString())))}async totalClaimedSupply(){return this.erc721.totalClaimedSupply()}async totalUnclaimedSupply(){return this.erc721.totalUnclaimedSupply()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[y("transfer"),w])}createBatch=n(async(t,r)=>this.erc721.lazyMint.prepare(t,r));async getClaimTransaction(t,r){let a=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;return this.erc721.getClaimTransaction(t,r,{checkERC20Allowance:a})}claimTo=n((()=>{var t=this;return async function(r,a){let e=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;return t.erc721.claimTo.prepare(r,a,{checkERC20Allowance:e})}})());claim=n((()=>{var t=this;return async function(r){let a=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;return t.claimTo.prepare(await t.contractWrapper.getSignerAddress(),r,a)}})());burn=n(async t=>this.erc721.burn.prepare(t));async get(t){return this.erc721.get(t)}async ownerOf(t){return this.erc721.ownerOf(t)}async balanceOf(t){return this.erc721.balanceOf(t)}async balance(){return this.erc721.balance()}async isApproved(t,r){return this.erc721.isApproved(t,r)}transfer=n(async(t,r)=>this.erc721.transfer.prepare(t,r));setApprovalForAll=n(async(t,r)=>this.erc721.setApprovalForAll.prepare(t,r));setApprovalForToken=n(async(t,r)=>p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approve",args:[t,r]}));async prepare(t,r,a){return p.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:a})}async call(t,r,a){return this.contractWrapper.call(t,r,a)}}export{m as NFTDrop};
