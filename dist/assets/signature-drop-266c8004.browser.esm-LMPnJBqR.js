import{D as c}from"./QueryParams-32a56510.browser.esm-CJ0DYI-a.js";import{N as h,i as u,A as d,X as C,j as y,Y as g,B as s,k as f,l as w,m as o,T as W}from"./index-CRXhB-tn.js";import{C as T,a as S,G as b,b as A}from"./contract-appuri-5c40af52.browser.esm-iXrARNet.js";import{C as E}from"./contract-interceptor-d7b164a7.browser.esm-C_yNedqZ.js";import{C as N,D as R,a as k}from"./contract-owner-49e75547.browser.esm-BuMVgBnJ.js";import{C as U}from"./contract-platform-fee-e756e68f.browser.esm-4_O3c1A9.js";import{C as M}from"./contract-roles-71988d2e.browser.esm-CBnW-SmK.js";import{C as I}from"./contract-sales-918c7cb8.browser.esm-JshavvlF.js";import{D as x}from"./drop-claim-conditions-e6f2abbf.browser.esm-Dk2Ztl9z.js";import{S as D}from"./erc-721-standard-4c4125d2.browser.esm-D2l0mTLI.js";import{E as p}from"./erc-721-27306550.browser.esm-CWT_rSOk.js";import{P as F}from"./thirdweb-checkout-f6974aaf.browser.esm-CMfSm83F.js";import"./index-CD3KUISV.js";import"./setErc20Allowance-7f76f677.browser.esm-DleMWaY1.js";import"./assertEnabled-d1700f0b.browser.esm-CuId8uDg.js";import"./treeify-BwbAlYD3.js";class m extends D{static contractRoles=h;constructor(t,r,a){let e=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},n=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0,l=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new u(t,r,n,e,a);super(l,a,i),this.abi=d.parse(n||[]),this.metadata=new T(this.contractWrapper,C,this.storage),this.app=new S(this.contractWrapper,this.metadata,this.storage),this.roles=new M(this.contractWrapper,m.contractRoles),this.royalties=new N(this.contractWrapper,this.metadata),this.sales=new I(this.contractWrapper),this.encoder=new y(this.contractWrapper),this.estimator=new b(this.contractWrapper),this.events=new A(this.contractWrapper),this.platformFees=new U(this.contractWrapper),this.interceptor=new E(this.contractWrapper),this.claimConditions=new x(this.contractWrapper,this.metadata,this.storage),this.signature=new p(this.contractWrapper,this.storage),this.revealer=new R(this.contractWrapper,this.storage,g.name,()=>this.erc721.nextTokenIdToMint()),this.signature=new p(this.contractWrapper,this.storage),this.owner=new k(this.contractWrapper),this.checkout=new F(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async totalSupply(){const[t,r]=await Promise.all([this.totalClaimedSupply(),this.totalUnclaimedSupply()]);return t.add(r)}async getAllClaimed(t){const r=s.from(t?.start||0).toNumber(),a=s.from(t?.count||c).toNumber(),e=Math.min((await this.totalClaimedSupply()).toNumber(),r+a);return await Promise.all(Array.from(Array(e).keys()).map(n=>this.get(n.toString())))}async getAllUnclaimed(t){const r=s.from(t?.start||0).toNumber(),a=s.from(t?.count||c).toNumber(),e=s.from(Math.max((await this.totalClaimedSupply()).toNumber(),r)),n=s.from(Math.min((await this.contractWrapper.read("nextTokenIdToMint",[])).toNumber(),e.toNumber()+a));return await Promise.all(Array.from(Array(n.sub(e).toNumber()).keys()).map(i=>this.erc721.getTokenMetadata(e.add(i).toString())))}async totalClaimedSupply(){return this.erc721.totalClaimedSupply()}async totalUnclaimedSupply(){return this.erc721.totalUnclaimedSupply()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[f("transfer"),w])}createBatch=o(async(t,r)=>this.erc721.lazyMint.prepare(t,r));async getClaimTransaction(t,r,a){return this.erc721.getClaimTransaction(t,r,a)}claimTo=o(async(t,r,a)=>this.erc721.claimTo.prepare(t,r,a));claim=o(async(t,r)=>this.erc721.claim.prepare(t,r));burn=o(async t=>this.erc721.burn.prepare(t));async prepare(t,r,a){return W.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:a})}async call(t,r,a){return this.contractWrapper.call(t,r,a)}}export{m as SignatureDrop};
