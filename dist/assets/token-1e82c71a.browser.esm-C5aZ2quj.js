import{N as g,i as f,A as W,bI as w,j as C,v as m,k as y,l as p,m as o,T as l,B as u,z as T}from"./index-CRXhB-tn.js";import{C as b,a as v,b as E,G as A}from"./contract-appuri-5c40af52.browser.esm-iXrARNet.js";import{C as R}from"./contract-interceptor-d7b164a7.browser.esm-C_yNedqZ.js";import{C as S}from"./contract-platform-fee-e756e68f.browser.esm-4_O3c1A9.js";import{C as B}from"./contract-roles-71988d2e.browser.esm-CBnW-SmK.js";import{C as O}from"./contract-sales-918c7cb8.browser.esm-JshavvlF.js";import{a as F}from"./erc-20-9a18a51c.browser.esm-DlwhiCEF.js";import{S as V}from"./erc-20-standard-1e9d9631.browser.esm-BeQu-3tT.js";import"./index-CD3KUISV.js";import"./assertEnabled-d1700f0b.browser.esm-CuId8uDg.js";import"./drop-claim-conditions-e6f2abbf.browser.esm-Dk2Ztl9z.js";import"./setErc20Allowance-7f76f677.browser.esm-DleMWaY1.js";import"./treeify-BwbAlYD3.js";class I{constructor(t,a){this.contractWrapper=t,this.events=a}async getAllHolderBalances(){const a=(await this.events.getEvents("Transfer")).map(e=>e.data),r={};a.forEach(e=>{const n=e?.from,s=e?.to,h=e?.value;n!==p&&(n in r||(r[n]=u.from(0)),r[n]=r[n].sub(h)),s!==p&&(s in r||(r[s]=u.from(0)),r[s]=r[s].add(h))});const c=Object.entries(r),i=await Promise.all(c.map(e=>{let[,n]=e;return T(this.contractWrapper.getProvider(),this.contractWrapper.address,n)}));return c.map((e,n)=>{let[s]=e;return{holder:s,balance:i[n]}})}}class d extends V{static contractRoles=g;constructor(t,a,r){let c=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},i=arguments.length>4?arguments[4]:void 0,e=arguments.length>5?arguments[5]:void 0,n=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new f(t,a,i,c,r);super(n,r,e),this.abi=W.parse(i||[]),this.metadata=new b(this.contractWrapper,w,this.storage),this.app=new v(this.contractWrapper,this.metadata,this.storage),this.roles=new B(this.contractWrapper,d.contractRoles),this.sales=new O(this.contractWrapper),this.events=new E(this.contractWrapper),this.history=new I(this.contractWrapper,this.events),this.encoder=new C(this.contractWrapper),this.estimator=new A(this.contractWrapper),this.platformFees=new S(this.contractWrapper),this.interceptor=new R(this.contractWrapper),this.signature=new F(this.contractWrapper,this.roles)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.erc20.getValue(await this.contractWrapper.read("getVotes",[t]))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.read("delegates",[await m(t)])}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[y("transfer"),p])}mint=o(async t=>this.erc20.mint.prepare(t));mintTo=o(async(t,a)=>this.erc20.mintTo.prepare(t,a));async getMintTransaction(t,a){return this.erc20.getMintTransaction(t,a)}mintBatchTo=o(async t=>this.erc20.mintBatchTo.prepare(t));delegateTo=o(async t=>l.fromContractWrapper({contractWrapper:this.contractWrapper,method:"delegate",args:[await m(t)]}));burn=o(t=>this.erc20.burn.prepare(t));burnFrom=o(async(t,a)=>this.erc20.burnFrom.prepare(t,a));async prepare(t,a,r){return l.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:a,overrides:r})}async call(t,a,r){return this.contractWrapper.call(t,a,r)}}export{d as Token};
