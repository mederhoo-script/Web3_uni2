const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-CRXhB-tn.js","assets/index-C5opNnue.css"])))=>i.map(i=>d[i]);
import{J as K,j as O,B as n,v as h,m as p,Z as N,x as y,T as u,q as C,z as A,f as T,E as P,K as Z,l as q,F as j,G as H,I as _,O as J,s as G,r as D,i as Q,bh as X,a2 as b,a1 as v,a0 as g,au as F}from"./index-CRXhB-tn.js";import{c as I}from"./cleanCurrencyAddress-ded19cfe.browser.esm-9Eophd18.js";import{s as x}from"./setErc20Allowance-7f76f677.browser.esm-DleMWaY1.js";import{g as W,h as B,i as Y}from"./marketplace-e3129e2f.browser.esm-BBiIxhg2.js";import{f as M,I as tt,a as rt}from"./QueryParams-32a56510.browser.esm-CJ0DYI-a.js";import{E as R,R as z}from"./assertEnabled-d1700f0b.browser.esm-CuId8uDg.js";import{b as S,G as V}from"./contract-appuri-5c40af52.browser.esm-iXrARNet.js";import{C as $}from"./contract-interceptor-d7b164a7.browser.esm-C_yNedqZ.js";const U=N({assetContractAddress:v,tokenId:g,quantity:g.default(1),currencyContractAddress:v.default(F),pricePerToken:b,startTimestamp:z.default(new Date),endTimestamp:R,isReservedListing:X().default(!1)});let m=function(l){return l[l.UNSET=0]="UNSET",l[l.Created=1]="Created",l[l.Completed=2]="Completed",l[l.Cancelled=3]="Cancelled",l[l.Active=4]="Active",l[l.Expired=5]="Expired",l}({});class mt{featureName=K.name;constructor(t,r){this.contractWrapper=t,this.storage=r,this.events=new S(this.contractWrapper),this.encoder=new O(this.contractWrapper),this.interceptor=new $(this.contractWrapper),this.estimator=new V(this.contractWrapper)}getAddress(){return this.contractWrapper.address}async getTotalCount(){return await this.contractWrapper.read("totalListings",[])}async getAll(t){const r=await this.getTotalCount(),e=n.from(t?.start||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No listings exist on the contract.");let s=[];s=(await W(e,a,(i,d)=>this.contractWrapper.read("getAllListings",[i,d]))).flat();const c=await this.applyFilter(s,t);return await Promise.all(c.map(i=>this.mapListing(i)))}async getAllValid(t){const r=await this.getTotalCount(),e=n.from(t?.start||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No listings exist on the contract.");let s=[];s=(await W(e,a,(i,d)=>this.contractWrapper.read("getAllValidListings",[i,d]))).flat();const c=await this.applyFilter(s,t);return await Promise.all(c.map(i=>this.mapListing(i)))}async getListing(t){const r=await this.contractWrapper.read("getListing",[t]);return await this.mapListing(r)}async isBuyerApprovedForListing(t,r){if(!(await this.validateListing(n.from(t))).isReservedListing)throw new Error(`Listing ${t} is not a reserved listing.`);return await this.contractWrapper.read("isBuyerApprovedForListing",[t,await h(r)])}async isCurrencyApprovedForListing(t,r){return await this.validateListing(n.from(t)),await this.contractWrapper.read("isCurrencyApprovedForListing",[t,await h(r)])}async currencyPriceForListing(t,r){const e=await this.validateListing(n.from(t)),a=await h(r);if(a===e.currencyContractAddress)return e.pricePerToken;if(!await this.isCurrencyApprovedForListing(t,a))throw new Error(`Currency ${a} is not approved for Listing ${t}.`);return await this.contractWrapper.read("currencyPriceForListing",[t,a])}createListing=p(async t=>{const r=await U.parseAsync(t);await B(this.contractWrapper,this.getAddress(),r.assetContractAddress,r.tokenId,await this.contractWrapper.getSignerAddress());const e=await y(this.contractWrapper.getProvider(),r.pricePerToken,r.currencyContractAddress),s=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;r.startTimestamp.lt(s)&&(r.startTimestamp=n.from(s));const o=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createListing",args:[{assetContract:r.assetContractAddress,tokenId:r.tokenId,quantity:r.quantity,currency:I(r.currencyContractAddress),pricePerToken:e,startTimestamp:r.startTimestamp,endTimestamp:r.endTimestamp,reserved:r.isReservedListing}],parse:c=>({id:this.contractWrapper.parseLogs("NewListing",c?.logs)[0].args.listingId,receipt:c})});return o.setGasLimitMultiple(1.2),o});createListingsBatch=p(async t=>{const r=(await Promise.all(t.map(a=>this.createListing.prepare(a)))).map(a=>a.encode()),e=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:a=>this.contractWrapper.parseLogs("NewListing",a?.logs).map(o=>({id:o.args.listingId,receipt:a}))});return e.setGasLimitMultiple(1.2),e});updateListing=p(async(t,r)=>{const e=await U.parseAsync(r);await B(this.contractWrapper,this.getAddress(),e.assetContractAddress,e.tokenId,await this.contractWrapper.getSignerAddress());const a=await y(this.contractWrapper.getProvider(),e.pricePerToken,e.currencyContractAddress),s=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateListing",args:[t,{assetContract:e.assetContractAddress,tokenId:e.tokenId,quantity:e.quantity,currency:I(e.currencyContractAddress),pricePerToken:a,startTimestamp:e.startTimestamp,endTimestamp:e.endTimestamp,reserved:e.isReservedListing}],parse:o=>({id:this.contractWrapper.parseLogs("UpdatedListing",o?.logs)[0].args.listingId,receipt:o})});return s.setGasLimitMultiple(1.2),s});cancelListing=p(async t=>{const r=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelListing",args:[t]});return r.setGasLimitMultiple(1.2),r});buyFromListing=p(async(t,r,e)=>{e&&(e=await h(e));const a=await this.validateListing(n.from(t)),{valid:s,error:o}=await this.isStillValidListing(a,r);if(!s)throw new Error(`Listing ${t} is no longer valid. ${o}`);const c=e||await this.contractWrapper.getSignerAddress(),i=n.from(r),d=n.from(a.pricePerToken).mul(i),w=await this.contractWrapper.getCallOverrides()||{};await x(this.contractWrapper,d,a.currencyContractAddress,w);const f=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"buyFromListing",args:[t,c,i,a.currencyContractAddress,d],overrides:w});return f.setGasLimitMultiple(1.2),f});approveBuyerForReservedListing=p(async(t,r)=>{if(await this.isBuyerApprovedForListing(t,r))throw new Error(`Buyer ${r} already approved for listing ${t}.`);{const a=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approveBuyerForListing",args:[t,r,!0]});return a.setGasLimitMultiple(1.2),a}});revokeBuyerApprovalForReservedListing=p(async(t,r)=>{if(await this.isBuyerApprovedForListing(t,r)){const a=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approveBuyerForListing",args:[t,r,!1]});return a.setGasLimitMultiple(1.2),a}else throw new Error(`Buyer ${r} not approved for listing ${t}.`)});approveCurrencyForListing=p(async(t,r,e)=>{const a=await this.validateListing(n.from(t)),s=await h(r);s===a.currencyContractAddress&&C(e===a.pricePerToken);const o=await this.contractWrapper.read("currencyPriceForListing",[t,s]);C(e===o);const c=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approveCurrencyForListing",args:[t,s,e]});return c.setGasLimitMultiple(1.2),c});revokeCurrencyApprovalForListing=p(async(t,r)=>{const e=await this.validateListing(n.from(t)),a=await h(r);if(a===e.currencyContractAddress)throw new Error("Can't revoke approval for main listing currency.");const s=await this.contractWrapper.read("currencyPriceForListing",[t,a]);C(!s.isZero());const o=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approveCurrencyForListing",args:[t,a,n.from(0)]});return o.setGasLimitMultiple(1.2),o});async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error(`Error getting the listing with id ${t}`),r}}async mapListing(t){let r=m.UNSET;const a=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;switch(t.status){case 1:r=n.from(t.startTimestamp).gt(a)?m.Created:n.from(t.endTimestamp).lt(a)?m.Expired:m.Active;break;case 2:r=m.Completed;break;case 3:r=m.Cancelled;break}return{assetContractAddress:t.assetContract,currencyContractAddress:t.currency,pricePerToken:t.pricePerToken.toString(),currencyValuePerToken:await A(this.contractWrapper.getProvider(),t.currency,t.pricePerToken),id:t.listingId.toString(),tokenId:t.tokenId.toString(),quantity:t.quantity.toString(),startTimeInSeconds:n.from(t.startTimestamp).toNumber(),asset:await M(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),endTimeInSeconds:n.from(t.endTimestamp).toNumber(),creatorAddress:t.listingCreator,isReservedListing:t.reserved,status:r}}async isStillValidListing(t,r){if(!await Y(this.contractWrapper.getProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,t.creatorAddress))return{valid:!1,error:`Token '${t.tokenId}' from contract '${t.assetContractAddress}' is not approved for transfer`};const a=this.contractWrapper.getProvider(),s=(await T(async()=>{const{default:d}=await import("./IERC165-ODxXmlQV.js");return{default:d}},[])).default,o=new P(t.assetContractAddress,s,a),c=await o.supportsInterface(tt),i=await o.supportsInterface(rt);if(c){const d=(await T(async()=>{const{default:L}=await import("./index-CRXhB-tn.js").then(E=>E.eK);return{default:L}},__vite__mapDeps([0,1]))).default,w=new P(t.assetContractAddress,d,a);let f;try{f=await w.ownerOf(t.tokenId)}catch{}const k=f?.toLowerCase()===t.creatorAddress.toLowerCase();return{valid:k,error:k?void 0:`Seller is not the owner of Token '${t.tokenId}' from contract '${t.assetContractAddress} anymore'`}}else if(i){const d=(await T(async()=>{const{default:L}=await import("./index-CRXhB-tn.js").then(E=>E.eM);return{default:L}},__vite__mapDeps([0,1]))).default,k=(await new P(t.assetContractAddress,d,a).balanceOf(t.creatorAddress,t.tokenId)).gte(r||t.quantity);return{valid:k,error:k?void 0:`Seller does not have enough balance of Token '${t.tokenId}' from contract '${t.assetContractAddress} to fulfill the listing`}}else return{valid:!1,error:"Contract does not implement ERC 1155 or ERC 721."}}async applyFilter(t,r){let e=[...t];if(r){if(r.seller){const a=await h(r.seller);e=e.filter(s=>s.listingCreator.toString().toLowerCase()===a?.toString().toLowerCase())}if(r.tokenContract){const a=await h(r.tokenContract);e=e.filter(s=>s.assetContract.toString().toLowerCase()===a?.toString().toLowerCase())}r.tokenId!==void 0&&(e=e.filter(a=>a.tokenId.toString()===r?.tokenId?.toString()))}return r?.count&&r.count<e.length?e.slice(0,r.count):e}}const et=N({assetContractAddress:v,tokenId:g,quantity:g.default(1),currencyContractAddress:v.default(F),minimumBidAmount:b,buyoutBidAmount:b,timeBufferInSeconds:g.default(900),bidBufferBps:g.default(500),startTimestamp:z.default(new Date),endTimestamp:R});class lt{featureName=Z.name;constructor(t,r){this.contractWrapper=t,this.storage=r,this.events=new S(this.contractWrapper),this.encoder=new O(this.contractWrapper),this.interceptor=new $(this.contractWrapper),this.estimator=new V(this.contractWrapper)}getAddress(){return this.contractWrapper.address}async getTotalCount(){return await this.contractWrapper.read("totalAuctions",[])}async getAll(t){const r=await this.getTotalCount(),e=n.from(t?.start||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No auctions exist on the contract.");let s=[];s=(await W(e,a,(i,d)=>this.contractWrapper.read("getAllAuctions",[i,d]))).flat();const c=await this.applyFilter(s,t);return await Promise.all(c.map(i=>this.mapAuction(i)))}async getAllValid(t){const r=await this.getTotalCount(),e=n.from(t?.start||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No auctions exist on the contract.");let s=[];s=(await W(e,a,(i,d)=>this.contractWrapper.read("getAllValidAuctions",[i,d]))).flat();const c=await this.applyFilter(s,t);return await Promise.all(c.map(i=>this.mapAuction(i)))}async getAuction(t){const r=await this.contractWrapper.read("getAuction",[t]);return await this.mapAuction(r)}async getWinningBid(t){await this.validateAuction(n.from(t));const r=await this.contractWrapper.read("getWinningBid",[t]);if(r._bidder!==q)return await this.mapBid(t.toString(),r._bidder,r._currency,r._bidAmount.toString())}async isWinningBid(t,r){return await this.contractWrapper.read("isNewWinningBid",[t,r])}async getWinner(t){const r=await this.validateAuction(n.from(t)),e=await this.contractWrapper.read("getWinningBid",[t]),a=n.from(Math.floor(Date.now()/1e3)),s=n.from(r.endTimeInSeconds);if(a.gt(s)&&e._bidder!==q)return e._bidder;const i=(await new S(this.contractWrapper).getEvents("AuctionClosed")).find(d=>d.data.auctionId.eq(n.from(t)));if(!i)throw new Error(`Could not find auction with ID ${t} in closed auctions`);return i.data.winningBidder}createAuction=p(async t=>{const r=et.parse(t);await B(this.contractWrapper,this.getAddress(),r.assetContractAddress,r.tokenId,await this.contractWrapper.getSignerAddress());const e=await y(this.contractWrapper.getProvider(),r.buyoutBidAmount,r.currencyContractAddress),a=await y(this.contractWrapper.getProvider(),r.minimumBidAmount,r.currencyContractAddress),o=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;r.startTimestamp.lt(o)&&(r.startTimestamp=n.from(o));const c=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createAuction",args:[{assetContract:r.assetContractAddress,tokenId:r.tokenId,quantity:r.quantity,currency:I(r.currencyContractAddress),minimumBidAmount:a,buyoutBidAmount:e,timeBufferInSeconds:r.timeBufferInSeconds,bidBufferBps:r.bidBufferBps,startTimestamp:r.startTimestamp,endTimestamp:r.endTimestamp}],parse:i=>({id:this.contractWrapper.parseLogs("NewAuction",i.logs)[0].args.auctionId,receipt:i})});return c.setGasLimitMultiple(1.2),c});createAuctionsBatch=p(async t=>{const r=(await Promise.all(t.map(a=>this.createAuction.prepare(a)))).map(a=>a.encode()),e=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:a=>this.contractWrapper.parseLogs("NewAuction",a?.logs).map(o=>({id:o.args.auctionId,receipt:a}))});return e.setGasLimitMultiple(1.2),e});buyoutAuction=p(async t=>{const r=await this.validateAuction(n.from(t)),e=await j(this.contractWrapper.getProvider(),r.currencyContractAddress);return this.makeBid.prepare(t,H(r.buyoutBidAmount,e.decimals))});makeBid=p(async(t,r)=>{const e=await this.validateAuction(n.from(t)),a=await y(this.contractWrapper.getProvider(),r,e.currencyContractAddress);if(a.eq(n.from(0)))throw new Error("Cannot make a bid with 0 value");if(n.from(e.buyoutBidAmount).gt(0)&&a.gt(e.buyoutBidAmount))throw new Error("Bid amount must be less than or equal to buyoutBidAmount");if(await this.getWinningBid(t)){const i=await this.isWinningBid(t,a);C(i)}else{const i=a,d=n.from(e.minimumBidAmount);C(i.gte(d))}const o=await this.contractWrapper.getCallOverrides()||{};await x(this.contractWrapper,a,e.currencyContractAddress,o);const c=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"bidInAuction",overrides:o,args:[t,a]});return c.setGasLimitMultiple(1.2),c});cancelAuction=p(async t=>{if(await this.getWinningBid(t))throw new Error("Bids already made.");const e=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelAuction",args:[t]});return e.setGasLimitMultiple(1.2),e});closeAuctionForBidder=p(async(t,r)=>{r||(r=await this.contractWrapper.getSignerAddress());const e=await this.validateAuction(n.from(t));try{const a=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"collectAuctionTokens",args:[n.from(t)]});return a.setGasLimitMultiple(1.2),a}catch(a){throw a.message.includes("Marketplace: auction still active.")?new _(t.toString(),e.endTimeInSeconds.toString()):a}});closeAuctionForSeller=p(async t=>{const r=await this.validateAuction(n.from(t));try{const e=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"collectAuctionPayout",args:[n.from(t)]});return e.setGasLimitMultiple(1.2),e}catch(e){throw e.message.includes("Marketplace: auction still active.")?new _(t.toString(),r.endTimeInSeconds.toString()):e}});executeSale=p(async t=>{const r=await this.validateAuction(n.from(t));try{const e=await this.getWinningBid(t);C(e,"No winning bid found");const a=this.encoder.encode("collectAuctionPayout",[t]),s=this.encoder.encode("collectAuctionTokens",[t]),o=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[[a,s]]});return o.setGasLimitMultiple(1.2),o}catch(e){throw e.message.includes("Marketplace: auction still active.")?new _(t.toString(),r.endTimeInSeconds.toString()):e}});async getBidBufferBps(t){return(await this.getAuction(t)).bidBufferBps}async getMinimumNextBid(t){const[r,e,a]=await Promise.all([this.getBidBufferBps(t),this.getWinningBid(t),this.validateAuction(n.from(t))]),s=e?n.from(e.bidAmount):n.from(a.minimumBidAmount),o=s.add(s.mul(r).div(1e4));return A(this.contractWrapper.getProvider(),a.currencyContractAddress,o)}async validateAuction(t){try{return await this.getAuction(t)}catch(r){throw console.error(`Error getting the auction with id ${t}`),r}}async mapAuction(t){let r=m.UNSET;const a=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;switch(t.status){case 1:r=n.from(t.startTimestamp).gt(a)?m.Created:n.from(t.endTimestamp).lt(a)?m.Expired:m.Active;break;case 2:r=m.Completed;break;case 3:r=m.Cancelled;break}return{id:t.auctionId.toString(),creatorAddress:t.auctionCreator,assetContractAddress:t.assetContract,tokenId:t.tokenId.toString(),quantity:t.quantity.toString(),currencyContractAddress:t.currency,minimumBidAmount:t.minimumBidAmount.toString(),minimumBidCurrencyValue:await A(this.contractWrapper.getProvider(),t.currency,t.minimumBidAmount),buyoutBidAmount:t.buyoutBidAmount.toString(),buyoutCurrencyValue:await A(this.contractWrapper.getProvider(),t.currency,t.buyoutBidAmount),timeBufferInSeconds:n.from(t.timeBufferInSeconds).toNumber(),bidBufferBps:n.from(t.bidBufferBps).toNumber(),startTimeInSeconds:n.from(t.startTimestamp).toNumber(),endTimeInSeconds:n.from(t.endTimestamp).toNumber(),asset:await M(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),status:r}}async mapBid(t,r,e,a){const s=await h(r),o=await h(e);return{auctionId:t,bidderAddress:s,currencyContractAddress:o,bidAmount:a,bidAmountCurrencyValue:await A(this.contractWrapper.getProvider(),o,a)}}async applyFilter(t,r){let e=[...t];if(r){if(r.seller){const a=await h(r.seller);e=e.filter(s=>s.auctionCreator.toString().toLowerCase()===a?.toString().toLowerCase())}if(r.tokenContract){const a=await h(r.tokenContract);e=e.filter(s=>s.assetContract.toString().toLowerCase()===a?.toString().toLowerCase())}r.tokenId!==void 0&&(e=e.filter(a=>a.tokenId.toString()===r?.tokenId?.toString()))}return r?.count&&r.count<e.length?e.slice(0,r.count):e}}const at=N({assetContractAddress:v,tokenId:g,quantity:g.default(1),currencyContractAddress:v.default(F),totalPrice:b,endTimestamp:R});class ht{featureName=J.name;constructor(t,r){this.contractWrapper=t,this.storage=r,this.events=new S(this.contractWrapper),this.encoder=new O(this.contractWrapper),this.interceptor=new $(this.contractWrapper),this.estimator=new V(this.contractWrapper)}getAddress(){return this.contractWrapper.address}async getTotalCount(){return await this.contractWrapper.read("totalOffers",[])}async getAll(t){const r=await this.getTotalCount(),e=n.from(t?.start||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No offers exist on the contract.");let s=[];s=(await W(e,a,(i,d)=>this.contractWrapper.read("getAllOffers",[i,d]))).flat();const c=await this.applyFilter(s,t);return await Promise.all(c.map(i=>this.mapOffer(i)))}async getAllValid(t){const r=await this.getTotalCount(),e=n.from(t?.start||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No offers exist on the contract.");let s=[];s=(await W(e,a,(i,d)=>this.contractWrapper.read("getAllValidOffers",[i,d]))).flat();const c=await this.applyFilter(s,t);return await Promise.all(c.map(i=>this.mapOffer(i)))}async getOffer(t){const r=await this.contractWrapper.read("getOffer",[t]);return await this.mapOffer(r)}makeOffer=p(async t=>{const r=await at.parseAsync(t),e=await this.contractWrapper.getChainID(),a=G(r.currencyContractAddress)?D[e].wrapped.address:r.currencyContractAddress,s=await y(this.contractWrapper.getProvider(),r.totalPrice,a),o=await this.contractWrapper.getCallOverrides();return await x(this.contractWrapper,s,a,o),u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"makeOffer",args:[{assetContract:r.assetContractAddress,tokenId:r.tokenId,quantity:r.quantity,currency:a,totalPrice:s,expirationTimestamp:r.endTimestamp}],parse:c=>({id:this.contractWrapper.parseLogs("NewOffer",c?.logs)[0].args.offerId,receipt:c})})});cancelOffer=p(async t=>u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelOffer",args:[t]}));acceptOffer=p(async t=>{const r=await this.validateOffer(n.from(t)),{valid:e,error:a}=await this.isStillValidOffer(r);if(!e)throw new Error(`Offer ${t} is no longer valid. ${a}`);const s=await this.contractWrapper.getCallOverrides()||{};return await B(this.contractWrapper,this.getAddress(),r.assetContractAddress,r.tokenId,await this.contractWrapper.getSignerAddress()),u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"acceptOffer",args:[t],overrides:s})});async validateOffer(t){try{return await this.getOffer(t)}catch(r){throw console.error(`Error getting the offer with id ${t}`),r}}async mapOffer(t){let r=m.UNSET;const a=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;switch(t.status){case 1:r=n.from(t.expirationTimestamp).lt(a)?m.Expired:m.Active;break;case 2:r=m.Completed;break;case 3:r=m.Cancelled;break}return{id:t.offerId.toString(),offerorAddress:t.offeror,assetContractAddress:t.assetContract,currencyContractAddress:t.currency,tokenId:t.tokenId.toString(),quantity:t.quantity.toString(),totalPrice:t.totalPrice.toString(),currencyValue:await A(this.contractWrapper.getProvider(),t.currency,t.totalPrice),asset:await M(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),endTimeInSeconds:n.from(t.expirationTimestamp).toNumber(),status:r}}async isStillValidOffer(t){if(n.from(Math.floor(Date.now()/1e3)).gt(t.endTimeInSeconds))return{valid:!1,error:`Offer with ID ${t.id} has expired`};const e=await this.contractWrapper.getChainID(),a=G(t.currencyContractAddress)?D[e].wrapped.address:t.currencyContractAddress,s=this.contractWrapper.getProvider(),o=(await T(async()=>{const{default:w}=await import("./index-CRXhB-tn.js").then(f=>f.eJ);return{default:w}},__vite__mapDeps([0,1]))).default,c=new Q(s,a,o,{},this.storage);return(await c.read("balanceOf",[t.offerorAddress])).lt(t.totalPrice)?{valid:!1,error:`Offeror ${t.offerorAddress} doesn't have enough balance of token ${a}`}:(await c.read("allowance",[t.offerorAddress,this.getAddress()])).lt(t.totalPrice)?{valid:!1,error:`Offeror ${t.offerorAddress} hasn't approved enough amount of token ${a}`}:{valid:!0,error:""}}async applyFilter(t,r){let e=[...t];if(r){if(r.offeror){const a=await h(r.offeror);e=e.filter(s=>s.offeror.toString().toLowerCase()===a?.toString().toLowerCase())}if(r.tokenContract){const a=await h(r.tokenContract);e=e.filter(s=>s.assetContract.toString().toLowerCase()===a?.toString().toLowerCase())}r.tokenId!==void 0&&(e=e.filter(a=>a.tokenId.toString()===r?.tokenId?.toString()))}return r?.count&&r.count<e.length?e.slice(0,r.count):e}}export{mt as M,lt as a,ht as b};
