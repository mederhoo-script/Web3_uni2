const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-CRXhB-tn.js","assets/index-C5opNnue.css"])))=>i.map(i=>d[i]);
import{be as m,B as c,aS as h,f as l,E as d}from"./index-CRXhB-tn.js";import{C as w,a as _}from"./setErc20Allowance-7f76f677.browser.esm-DleMWaY1.js";const y=m("0x80ac58cd"),C=m("0xd9b67a26"),E={name:"Failed to load NFT metadata"};async function R(t,a,e){if(a.startsWith("data:application/json;base64")&&typeof Buffer<"u"){const o=a.split(",")[1],s=JSON.parse(Buffer.from(o,"base64").toString("utf-8"));return _.parse({...s,id:c.from(t).toString(),uri:a})}const n=a.replace("{id}",h(c.from(t).toHexString(),32).slice(2));let r;try{r=await e.downloadJSON(n)}catch{const s=a.replace("{id}",c.from(t).toString());try{r=await e.downloadJSON(s)}catch{console.warn(`failed to get token metadata: ${JSON.stringify({tokenId:t.toString(),tokenUri:a})} -- falling back to default metadata`),r=E}}return _.parse({...r,id:c.from(t).toString(),uri:a})}async function S(t,a,e,n){let r;const o=(await l(async()=>{const{default:i}=await import("./IERC165-ODxXmlQV.js");return{default:i}},[])).default,s=new d(t,o,a),[p,b]=await Promise.all([s.supportsInterface(y),s.supportsInterface(C)]);if(p){const i=(await l(async()=>{const{default:f}=await import("./index-CRXhB-tn.js").then(u=>u.eL);return{default:f}},__vite__mapDeps([0,1]))).default;r=await new d(t,i,a).tokenURI(e)}else if(b){const i=(await l(async()=>{const{default:f}=await import("./index-CRXhB-tn.js").then(u=>u.eN);return{default:f}},__vite__mapDeps([0,1]))).default;r=await new d(t,i,a).uri(e)}else throw Error("Contract must implement ERC 1155 or ERC 721.");return r?R(e,r,n):_.parse({...E,id:c.from(e).toString(),uri:""})}async function F(t,a){return typeof t=="string"?t:await a.upload(w.parse(t))}async function A(t,a,e,n){if(I(t))return t;if(T(t))return await a.uploadBatch(t.map(o=>w.parse(o)),{rewriteFileNames:{fileStartNumber:e||0},onProgress:n?.onProgress});throw new Error("NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)")}function L(t){const a=t[0].substring(0,t[0].lastIndexOf("/"));for(let e=0;e<t.length;e++){const n=t[e].substring(0,t[e].lastIndexOf("/"));if(a!==n)throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${a}' but got '${n}'`)}return a.replace(/\/$/,"")+"/"}function I(t){return t.find(a=>typeof a!="string")===void 0}function T(t){return t.find(a=>typeof a!="object")===void 0}const x=100;export{x as D,E as F,y as I,C as a,R as b,A as c,S as f,L as g,F as u};
