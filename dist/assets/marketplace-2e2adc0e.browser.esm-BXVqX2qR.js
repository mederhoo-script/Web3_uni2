const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-CRXhB-tn.js","assets/index-C5opNnue.css"])))=>i.map(i=>d[i]);
import{M as G,i as $,A as U,p as V,j as _,l,L as W,B as s,k as v,m as c,q as A,r as z,s as M,T as d,t as R,u as H,v as y,x as L,y as O,z as T,f as k,E as S,F as K,G as Y,H as j,I as B}from"./index-CRXhB-tn.js";import{D as Q,f as I,I as Z,a as J}from"./QueryParams-32a56510.browser.esm-CJ0DYI-a.js";import{m as b,v as q,h as x,i as X,a as tt}from"./marketplace-e3129e2f.browser.esm-BBiIxhg2.js";import{C as rt,a as et,G as at,b as D}from"./contract-appuri-5c40af52.browser.esm-iXrARNet.js";import{C as nt}from"./contract-interceptor-d7b164a7.browser.esm-C_yNedqZ.js";import{C as st}from"./contract-platform-fee-e756e68f.browser.esm-4_O3c1A9.js";import{C as ot}from"./contract-roles-71988d2e.browser.esm-CBnW-SmK.js";import{c as N}from"./cleanCurrencyAddress-ded19cfe.browser.esm-9Eophd18.js";import{s as E}from"./setErc20Allowance-7f76f677.browser.esm-DleMWaY1.js";let f=function(w){return w[w.Direct=0]="Direct",w[w.Auction=1]="Auction",w}({});class it{constructor(t,r){this.contractWrapper=t,this.storage=r,this.encoder=new _(t)}getAddress(){return this.contractWrapper.address}async getListing(t){const r=await this.contractWrapper.read("listings",[t]);if(r.listingId.toString()!==t.toString())throw new W(this.getAddress(),t.toString());if(r.listingType!==f.Auction)throw new R(this.getAddress(),t.toString(),"Direct","Auction");return await this.mapListing(r)}async getWinningBid(t){await this.validateListing(s.from(t));const r=await this.contractWrapper.read("winningBid",[t]);if(r.offeror!==l)return await b(this.contractWrapper.getProvider(),s.from(t),r)}async getWinner(t){const r=await this.validateListing(s.from(t)),e=await this.contractWrapper.read("winningBid",[t]),a=s.from(Math.floor(Date.now()/1e3)),n=s.from(r.endTimeInEpochSeconds);if(a.gt(n)&&e.offeror!==l)return e.offeror;const p=(await new D(this.contractWrapper).getEvents("AuctionClosed")).find(i=>i.data.listingId.eq(s.from(t)));if(!p)throw new Error(`Could not find auction with listingId ${t} in closed auctions`);return p.data.winningBidder}createListing=c(async t=>{q(t);const r=await y(t.assetContractAddress),e=await y(t.currencyContractAddress);await x(this.contractWrapper,this.getAddress(),r,t.tokenId,await this.contractWrapper.getSignerAddress());const a=await L(this.contractWrapper.getProvider(),t.buyoutPricePerToken,e),n=await L(this.contractWrapper.getProvider(),t.reservePricePerToken,e);let o=Math.floor(t.startTimestamp.getTime()/1e3);const p=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;o<p&&(o=p);const i=d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createListing",args:[{assetContract:r,tokenId:t.tokenId,buyoutPricePerToken:a,currencyToAccept:N(e),listingType:f.Auction,quantityToList:t.quantity,reservePricePerToken:n,secondsUntilEndTime:t.listingDurationInSeconds,startTime:s.from(o)}],parse:h=>({id:this.contractWrapper.parseLogs("ListingAdded",h?.logs)[0].args.listingId,receipt:h})});return i.setGasLimitMultiple(1.2),i});createListingsBatch=c(async t=>{const r=(await Promise.all(t.map(a=>this.createListing.prepare(a)))).map(a=>a.encode()),e=d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:a=>this.contractWrapper.parseLogs("ListingAdded",a?.logs).map(o=>({id:o.args.listingId,receipt:a}))});return e.setGasLimitMultiple(1.2),e});buyoutListing=c(async t=>{const r=await this.validateListing(s.from(t)),e=await K(this.contractWrapper.getProvider(),r.currencyContractAddress);return this.makeBid.prepare(t,Y(r.buyoutPrice,e.decimals))});makeBid=c(async(t,r)=>{const e=await this.validateListing(s.from(t)),a=await L(this.contractWrapper.getProvider(),r,e.currencyContractAddress);if(a.eq(s.from(0)))throw new Error("Cannot make a bid with 0 value");const n=await this.contractWrapper.read("bidBufferBps",[]),o=await this.getWinningBid(t);if(o){const m=tt(o.pricePerToken,a,n);A(m)}else{const m=a,g=s.from(e.reservePrice);A(m.gte(g))}const u=s.from(e.quantity),p=a.mul(u),i=await this.contractWrapper.getCallOverrides()||{};await E(this.contractWrapper,p,e.currencyContractAddress,i);const h=d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"offer",args:[t,e.quantity,e.currencyContractAddress,a,O],overrides:i});return h.setGasLimitMultiple(1.2),h});cancelListing=c(async t=>{const r=await this.validateListing(s.from(t)),e=s.from(Math.floor(Date.now()/1e3)),a=s.from(r.startTimeInEpochSeconds),n=await this.contractWrapper.read("winningBid",[t]);if(e.gt(a)&&n.offeror!==l)throw new j(t.toString());const o=d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"closeAuction",args:[s.from(t),await this.contractWrapper.getSignerAddress()]});return o.setGasLimitMultiple(1.2),o});closeListing=c(async(t,r)=>{r||(r=await this.contractWrapper.getSignerAddress());const e=await this.validateListing(s.from(t));try{const a=d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"closeAuction",args:[s.from(t),r]});return a.setGasLimitMultiple(1.2),a}catch(a){throw a.message.includes("cannot close auction before it has ended")?new B(t.toString(),e.endTimeInEpochSeconds.toString()):a}});executeSale=c(async t=>{const r=await this.validateListing(s.from(t));try{const e=await this.getWinningBid(t);A(e,"No winning bid found");const a=this.encoder.encode("closeAuction",[t,r.sellerAddress]),n=this.encoder.encode("closeAuction",[t,e.buyerAddress]),o=d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[a,n]});return o.setGasLimitMultiple(1.2),o}catch(e){throw e.message.includes("cannot close auction before it has ended")?new B(t.toString(),r.endTimeInEpochSeconds.toString()):e}});updateListing=c(async t=>{const r=d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateListing",args:[t.id,t.quantity,t.reservePrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInEpochSeconds,t.endTimeInEpochSeconds]});return r.setGasLimitMultiple(1.2),r});async getBidBufferBps(){return this.contractWrapper.read("bidBufferBps",[])}async getMinimumNextBid(t){const[r,e,a]=await Promise.all([this.getBidBufferBps(),this.getWinningBid(t),this.validateListing(s.from(t))]),n=e?e.currencyValue.value:a.reservePrice,o=n.add(n.mul(r).div(1e4));return T(this.contractWrapper.getProvider(),a.currencyContractAddress,o)}async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error(`Error getting the listing with id ${t}`),r}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:s.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await T(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInEpochSeconds:t.startTime,asset:await I(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),reservePriceCurrencyValuePerToken:await T(this.contractWrapper.getProvider(),t.currency,t.reservePricePerToken),reservePrice:s.from(t.reservePricePerToken),endTimeInEpochSeconds:t.endTime,sellerAddress:t.tokenOwner,type:f.Auction}}}class ct{constructor(t,r){this.contractWrapper=t,this.storage=r}getAddress(){return this.contractWrapper.address}async getListing(t){const r=await this.contractWrapper.read("listings",[t]);if(r.assetContract===l)throw new W(this.getAddress(),t.toString());if(r.listingType!==f.Direct)throw new R(this.getAddress(),t.toString(),"Auction","Direct");return await this.mapListing(r)}async getActiveOffer(t,r){await this.validateListing(s.from(t)),A(H(r));const e=await this.contractWrapper.read("offers",[t,await y(r)]);if(e.offeror!==l)return await b(this.contractWrapper.getProvider(),s.from(t),e)}createListing=c(async t=>{q(t);const r=await y(t.assetContractAddress),e=await y(t.currencyContractAddress);await x(this.contractWrapper,this.getAddress(),r,t.tokenId,await this.contractWrapper.getSignerAddress());const a=await L(this.contractWrapper.getProvider(),t.buyoutPricePerToken,e);let n=Math.floor(t.startTimestamp.getTime()/1e3);const u=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;n<u&&(n=u);const p=d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createListing",args:[{assetContract:r,tokenId:t.tokenId,buyoutPricePerToken:a,currencyToAccept:N(e),listingType:f.Direct,quantityToList:t.quantity,reservePricePerToken:a,secondsUntilEndTime:t.listingDurationInSeconds,startTime:s.from(n)}],parse:i=>({id:this.contractWrapper.parseLogs("ListingAdded",i?.logs)[0].args.listingId,receipt:i})});return p.setGasLimitMultiple(1.2),p});createListingsBatch=c(async t=>{const r=(await Promise.all(t.map(a=>this.createListing.prepare(a)))).map(a=>a.encode()),e=d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:a=>this.contractWrapper.parseLogs("ListingAdded",a?.logs).map(o=>({id:o.args.listingId,receipt:a}))});return e.setGasLimitMultiple(1.2),e});makeOffer=c(async(t,r,e,a,n)=>{if(M(e))throw new Error("You must use the wrapped native token address when making an offer with a native token");const o=await L(this.contractWrapper.getProvider(),a,e);try{await this.getListing(t)}catch(g){throw console.error("Failed to get listing, err =",g),new Error(`Error getting the listing with id ${t}`)}const u=s.from(r),p=s.from(o).mul(u),i=await this.contractWrapper.getCallOverrides()||{};await E(this.contractWrapper,p,e,i);let h=O;n&&(h=s.from(Math.floor(n.getTime()/1e3)));const m=d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"offer",args:[t,r,e,o,h],overrides:i});return m.setGasLimitMultiple(1.2),m});acceptOffer=c(async(t,r)=>{await this.validateListing(s.from(t));const e=await y(r),a=await this.contractWrapper.read("offers",[t,e]),n=d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"acceptOffer",args:[t,e,a.currency,a.pricePerToken]});return n.setGasLimitMultiple(1.2),n});buyoutListing=c(async(t,r,e)=>{const a=await this.validateListing(s.from(t)),{valid:n,error:o}=await this.isStillValidListing(a,r);if(!n)throw new Error(`Listing ${t} is no longer valid. ${o}`);const u=e||await this.contractWrapper.getSignerAddress(),p=s.from(r),i=s.from(a.buyoutPrice).mul(p),h=await this.contractWrapper.getCallOverrides()||{};await E(this.contractWrapper,i,a.currencyContractAddress,h);const m=d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"buy",args:[t,u,p,a.currencyContractAddress,i],overrides:h});return m.setGasLimitMultiple(1.2),m});updateListing=c(async t=>{const r=d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateListing",args:[t.id,t.quantity,t.buyoutPrice,t.buyoutPrice,await y(t.currencyContractAddress),t.startTimeInSeconds,t.secondsUntilEnd]});return r.setGasLimitMultiple(1.2),r});cancelListing=c(async t=>{const r=d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelDirectListing",args:[t]});return r.setGasLimitMultiple(1.2),r});async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error(`Error getting the listing with id ${t}`),r}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:s.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await T(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInSeconds:t.startTime,asset:await I(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),secondsUntilEnd:t.endTime,sellerAddress:t.tokenOwner,type:f.Direct}}async isStillValidListing(t,r){if(!await X(this.contractWrapper.getProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,t.sellerAddress))return{valid:!1,error:`Token '${t.tokenId}' from contract '${t.assetContractAddress}' is not approved for transfer`};const a=this.contractWrapper.getProvider(),n=(await k(async()=>{const{default:i}=await import("./IERC165-ODxXmlQV.js");return{default:i}},[])).default,o=new S(t.assetContractAddress,n,a),u=await o.supportsInterface(Z),p=await o.supportsInterface(J);if(u){const i=(await k(async()=>{const{default:C}=await import("./index-CRXhB-tn.js").then(P=>P.eK);return{default:C}},__vite__mapDeps([0,1]))).default,h=new S(t.assetContractAddress,i,a);let m;try{m=await h.ownerOf(t.tokenId)}catch{}const g=m?.toLowerCase()===t.sellerAddress.toLowerCase();return{valid:g,error:g?void 0:`Seller is not the owner of Token '${t.tokenId}' from contract '${t.assetContractAddress} anymore'`}}else if(p){const i=(await k(async()=>{const{default:C}=await import("./index-CRXhB-tn.js").then(P=>P.eM);return{default:C}},__vite__mapDeps([0,1]))).default,g=(await new S(t.assetContractAddress,i,a).balanceOf(t.sellerAddress,t.tokenId)).gte(r||t.quantity);return{valid:g,error:g?void 0:`Seller does not have enough balance of Token '${t.tokenId}' from contract '${t.assetContractAddress} to fulfill the listing`}}else return{valid:!1,error:"Contract does not implement ERC 1155 or ERC 721."}}}class F{static contractRoles=G;get chainId(){return this._chainId}constructor(t,r,e){let a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},n=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0,u=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new $(t,r,n,a,e);this._chainId=o,this.abi=U.parse(n||[]),this.contractWrapper=u,this.storage=e,this.metadata=new rt(this.contractWrapper,V,this.storage),this.app=new et(this.contractWrapper,this.metadata,this.storage),this.roles=new ot(this.contractWrapper,F.contractRoles),this.encoder=new _(this.contractWrapper),this.estimator=new at(this.contractWrapper),this.direct=new ct(this.contractWrapper,this.storage),this.auction=new it(this.contractWrapper,this.storage),this.events=new D(this.contractWrapper),this.platformFees=new st(this.contractWrapper),this.interceptor=new nt(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async getListing(t){const r=await this.contractWrapper.read("listings",[t]);if(r.assetContract===l)throw new W(this.getAddress(),t.toString());switch(r.listingType){case f.Auction:return await this.auction.mapListing(r);case f.Direct:return await this.direct.mapListing(r);default:throw new Error(`Unknown listing type: ${r.listingType}`)}}async getActiveListings(t){const r=await this.getAllListingsNoFilter(!0),e=this.applyFilter(r,t),a=s.from(Math.floor(Date.now()/1e3));return e.filter(n=>n.type===f.Auction&&s.from(n.endTimeInEpochSeconds).gt(a)&&s.from(n.startTimeInEpochSeconds).lte(a)||n.type===f.Direct&&s.from(n.quantity).gt(0))}async getAllListings(t){const r=await this.getAllListingsNoFilter(!1);return this.applyFilter(r,t)}getAll=this.getAllListings;async getTotalCount(){return await this.contractWrapper.read("totalListings",[])}async isRestrictedToListerRoleOnly(){return!await this.contractWrapper.read("hasRole",[v("lister"),l])}async getBidBufferBps(){return this.contractWrapper.read("bidBufferBps",[])}async getTimeBufferInSeconds(){return this.contractWrapper.read("timeBuffer",[])}async getOffers(t){const r=await this.events.getEvents("NewOffer",{order:"desc",filters:{listingId:t}});return await Promise.all(r.map(e=>b(this.contractWrapper.getProvider(),s.from(t),{quantityWanted:e.data.quantityWanted,pricePerToken:e.data.quantityWanted.gt(0)?e.data.totalOfferAmount.div(e.data.quantityWanted):e.data.totalOfferAmount,currency:e.data.currency,offeror:e.data.offeror})))}buyoutListing=c(async(t,r,e)=>{const a=await this.contractWrapper.read("listings",[t]);if(a.listingId.toString()!==t.toString())throw new W(this.getAddress(),t.toString());switch(a.listingType){case f.Direct:return A(r!==void 0),await this.direct.buyoutListing.prepare(t,r,e);case f.Auction:return await this.auction.buyoutListing.prepare(t);default:throw Error(`Unknown listing type: ${a.listingType}`)}});makeOffer=c(async(t,r,e)=>{const a=await this.contractWrapper.read("listings",[t]);if(a.listingId.toString()!==t.toString())throw new W(this.getAddress(),t.toString());const n=await this.contractWrapper.getChainID();switch(a.listingType){case f.Direct:return A(e),await this.direct.makeOffer.prepare(t,e,M(a.currency)?z[n].wrapped.address:a.currency,r);case f.Auction:return await this.auction.makeBid.prepare(t,r);default:throw Error(`Unknown listing type: ${a.listingType}`)}});setBidBufferBps=c(async t=>{await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());const r=await this.getTimeBufferInSeconds();return d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setAuctionBuffers",args:[r,s.from(t)]})});setTimeBufferInSeconds=c(async t=>{await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());const r=await this.getBidBufferBps();return d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setAuctionBuffers",args:[s.from(t),r]})});allowListingFromSpecificAssetOnly=c(async t=>{const r=[];return(await this.roles.get("asset")).includes(l)&&r.push(this.encoder.encode("revokeRole",[v("asset"),l])),r.push(this.encoder.encode("grantRole",[v("asset"),t])),d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r]})});allowListingFromAnyAsset=c(async()=>{const t=[],r=await this.roles.get("asset");for(const e in r)t.push(this.encoder.encode("revokeRole",[v("asset"),e]));return t.push(this.encoder.encode("grantRole",[v("asset"),l])),d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[t]})});async getAllListingsNoFilter(t){return(await Promise.all(Array.from(Array((await this.contractWrapper.read("totalListings",[])).toNumber()).keys()).map(async e=>{let a;try{a=await this.getListing(e)}catch(n){if(n instanceof W)return;console.warn(`Failed to get listing ${e}' - skipping. Try 'marketplace.getListing(${e})' to get the underlying error.`);return}if(a.type===f.Auction)return a;if(t){const{valid:n}=await this.direct.isStillValidListing(a);if(!n)return}return a}))).filter(e=>e!==void 0)}applyFilter(t,r){let e=[...t];const a=s.from(r?.start||0).toNumber(),n=s.from(r?.count||Q).toNumber();return r&&(r.seller&&(e=e.filter(o=>o.sellerAddress.toString().toLowerCase()===r?.seller?.toString().toLowerCase())),r.tokenContract&&(e=e.filter(o=>o.assetContractAddress.toString().toLowerCase()===r?.tokenContract?.toString().toLowerCase())),r.tokenId!==void 0&&(e=e.filter(o=>o.tokenId.toString()===r?.tokenId?.toString())),e=e.filter((o,u)=>u>=a),e=e.slice(0,n)),e}async prepare(t,r,e){return d.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:e})}async call(t,r,e){return this.contractWrapper.call(t,r,e)}}export{F as Marketplace};
