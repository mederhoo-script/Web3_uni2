import{aA as tt,B as C,l as H,ai as I,aB as at,v as u,m as l,T as w,aC as rt,j as T,aD as A,aE as M,aF as j,aG as S,aH as Y,aI as et,aJ as x,aK as q,aL as G,aM as K,aN as nt,y as P,q as it,aO as J,x as st,aP as R,aQ as k,aR as ot,aS as ct,aq as L,$ as B,aT as pt,Z as lt,aU as ht,a2 as dt,a1 as ut}from"./index-CRXhB-tn.js";import{a as W}from"./assertEnabled-d1700f0b.browser.esm-CuId8uDg.js";import{d as y,h as v,C as mt}from"./contract-appuri-5c40af52.browser.esm-iXrARNet.js";import{F as gt,b as ft,c as N,D as F,u as yt}from"./QueryParams-32a56510.browser.esm-CJ0DYI-a.js";import{D as wt,c as Ct}from"./contract-owner-49e75547.browser.esm-BuMVgBnJ.js";import{S as Wt,b as bt,M as Et,t as _,l as U,n as O,C as b,c as z,f as Tt,p as At,d as Mt,e as $,g as V,u as St,h as Pt,i as Q}from"./index-CD3KUISV.js";import{s as It}from"./setErc20Allowance-7f76f677.browser.esm-DleMWaY1.js";class vt{constructor(t,a,r){this.storage=r,this.contractWrapper=t,this.metadata=a}async getActive(t,a){const r=await this.get(t),e=await this.metadata.get();return await _(r,0,this.contractWrapper.getProvider(),e.merkle,this.storage,a?.withAllowList||!1)}async get(t,a){if(this.isLegacySinglePhaseDrop(this.contractWrapper)){const r=await this.contractWrapper.read("claimCondition",[t]);return U(r)}else if(this.isLegacyMultiPhaseDrop(this.contractWrapper)){const r=a!==void 0?a:await this.contractWrapper.read("getActiveClaimConditionId",[t]),e=await this.contractWrapper.read("getClaimConditionById",[t,r]);return U(e)}else if(this.isNewSinglePhaseDrop(this.contractWrapper)){const r=await this.contractWrapper.read("claimCondition",[t]);return O(r)}else if(this.isNewMultiphaseDrop(this.contractWrapper)){const r=a!==void 0?a:await this.contractWrapper.read("getActiveClaimConditionId",[t]),e=await this.contractWrapper.read("getClaimConditionById",[t,r]);return O(e)}else throw new Error("Contract does not support claim conditions")}async getAll(t,a){if(this.isLegacyMultiPhaseDrop(this.contractWrapper)||this.isNewMultiphaseDrop(this.contractWrapper)){const r=await this.contractWrapper.read("claimCondition",[t]),e=r.currentStartId.toNumber(),n=r.count.toNumber(),i=[];for(let o=e;o<e+n;o++)i.push(await this.get(t,o));const c=await this.metadata.get();return Promise.all(i.map(o=>_(o,0,this.contractWrapper.getProvider(),c.merkle,this.storage,a?.withAllowList||!1)))}else return[await this.getActive(t,a)]}async canClaim(t,a,r){return r&&(r=await u(r)),(await this.getClaimIneligibilityReasons(t,a,r)).length===0}async getClaimIneligibilityReasons(t,a,r){const e=[];let n,i;if(r===void 0)try{r=await this.contractWrapper.getSignerAddress()}catch(s){console.warn("failed to get signer address",s)}if(!r)return[b.NoWallet];const c=await u(r);try{i=await this.getActive(t)}catch(s){return R(s,"!CONDITION")||R(s,"no active mint condition")||R(s,"DropNoActiveCondition")?(e.push(b.NoClaimConditionSet),e):(e.push(b.Unknown),e)}if(i.availableSupply!=="unlimited"&&C.from(i.availableSupply).lt(a))return e.push(b.NotEnoughSupply),e;const p=k(i.merkleRootHash).length>0;let h=null;if(p){if(h=await this.getClaimerProofs(t,c),!h&&(this.isLegacySinglePhaseDrop(this.contractWrapper)||this.isLegacyMultiPhaseDrop(this.contractWrapper)))return e.push(b.AddressNotAllowed),e;if(h)try{const s=await this.prepareClaim(t,a,!1,c);let f;if(this.isLegacyMultiPhaseDrop(this.contractWrapper)){if(n=await this.contractWrapper.read("getActiveClaimConditionId",[t]),[f]=await this.contractWrapper.read("verifyClaimMerkleProof",[n,c,t,a,s.proofs,s.maxClaimable]),!f)return e.push(b.AddressNotAllowed),e}else if(this.isLegacySinglePhaseDrop(this.contractWrapper)){if([f]=await this.contractWrapper.read("verifyClaimMerkleProof",[t,c,a,{proof:s.proofs,maxQuantityInAllowlist:s.maxClaimable}]),!f)return e.push(b.AddressNotAllowed),e}else this.isNewSinglePhaseDrop(this.contractWrapper)?await this.contractWrapper.read("verifyClaim",[t,c,a,s.currencyAddress,s.price,{proof:s.proofs,quantityLimitPerWallet:s.maxClaimable,currency:s.currencyAddressInProof,pricePerToken:s.priceInProof}]):this.isNewMultiphaseDrop(this.contractWrapper)&&(n=await this.contractWrapper.read("getActiveClaimConditionId",[t]),await this.contractWrapper.read("verifyClaim",[n,c,t,a,s.currencyAddress,s.price,{proof:s.proofs,quantityLimitPerWallet:s.maxClaimable,currency:s.currencyAddressInProof,pricePerToken:s.priceInProof}]))}catch(s){switch(console.warn("Merkle proof verification failed:","reason"in s?s.reason||s.errorName:s),s.reason||s.errorName){case"!Qty":case"DropClaimExceedLimit":e.push(b.OverMaxClaimablePerWallet);break;case"!PriceOrCurrency":case"DropClaimInvalidTokenPrice":e.push(b.WrongPriceOrCurrency);break;case"!MaxSupply":case"DropClaimExceedMaxSupply":e.push(b.NotEnoughSupply);break;case"cant claim yet":case"DropClaimNotStarted":e.push(b.ClaimPhaseNotStarted);break;default:{e.push(b.AddressNotAllowed);break}}return e}}if(this.isNewSinglePhaseDrop(this.contractWrapper)||this.isNewMultiphaseDrop(this.contractWrapper)){let s=C.from(0),f=z(i.maxClaimablePerWallet,0);try{s=await this.getSupplyClaimedByWallet(t,c)}catch{}if(h&&(f=z(h.maxClaimable,0)),f.gt(0)&&f.lt(s.add(a)))return e.push(b.OverMaxClaimablePerWallet),e;if((!p||p&&!h)&&(f.lte(s)||f.eq(0)))return e.push(b.AddressNotAllowed),e}let[m,d]=[C.from(0),C.from(0)];this.isLegacyMultiPhaseDrop(this.contractWrapper)?(n=await this.contractWrapper.read("getActiveClaimConditionId",[t]),[m,d]=await this.contractWrapper.read("getClaimTimestamp",[t,n,c])):this.isLegacySinglePhaseDrop(this.contractWrapper)&&([m,d]=await this.contractWrapper.read("getClaimTimestamp",[t,c]));const g=C.from(Date.now()).div(1e3);return m.gt(0)&&g.lt(d)?(d.eq(P)?e.push(b.AlreadyClaimed):e.push(b.WaitBeforeNextClaimTransaction),e):(i.price.gt(0)&&ot(),e)}async getClaimerProofs(t,a,r){const n=(await this.get(t,r)).merkleRoot;if(k(n).length>0){const c=await this.metadata.get(),o=await u(a);return await Tt(o,n.toString(),c.merkle,this.contractWrapper.getProvider(),this.storage,this.getSnapshotFormatVersion())}else return null}async getSupplyClaimedByWallet(t,a){const r=await u(a);if(this.isNewSinglePhaseDrop(this.contractWrapper))return await this.contractWrapper.read("getSupplyClaimedByWallet",[t,r]);if(this.isNewMultiphaseDrop(this.contractWrapper)){const e=await this.contractWrapper.read("getActiveClaimConditionId",[t]);return await this.contractWrapper.read("getSupplyClaimedByWallet",[t,e,r])}throw new Error("This contract does not support the getSupplyClaimedByWallet function")}set=l((()=>{var t=this;return async function(a,r){let e=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1;return t.setBatch.prepare([{tokenId:a,claimConditions:r}],e)}})());setBatch=l((()=>{var t=this;return async function(a){let r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;const e={},n=await Promise.all(a.map(async o=>{let{tokenId:p,claimConditions:h}=o,m=h;if(t.isLegacySinglePhaseDrop(t.contractWrapper)){if(r=!0,h.length===0)m=[{startTime:new Date(0),currencyAddress:H,price:0,maxClaimableSupply:0,maxClaimablePerWallet:0,waitInSeconds:0,merkleRootHash:ct([0],32),snapshot:[]}];else if(h.length>1)throw new Error("Single phase drop contract cannot have multiple claim conditions, only one is allowed")}(t.isNewSinglePhaseDrop(t.contractWrapper)||t.isNewMultiphaseDrop(t.contractWrapper))&&m.forEach(s=>{if(s.snapshot&&s.snapshot.length>0&&(s.maxClaimablePerWallet===void 0||s.maxClaimablePerWallet==="unlimited"))throw new Error(`maxClaimablePerWallet must be set to a specific value when an allowlist is set.
Set it to 0 to only allow addresses in the allowlist to claim the amount specified in the allowlist.

ex:
contract.claimConditions.set(tokenId, [{ snapshot: [{ address: '0x...', maxClaimable: 1 }], maxClaimablePerWallet: 0 }])`);if(s.snapshot&&s.snapshot.length>0&&s.maxClaimablePerWallet?.toString()==="0"&&s.snapshot.map(f=>typeof f=="string"?0:Number(f.maxClaimable?.toString()||0)).reduce((f,D)=>f+D,0)===0)throw new Error("maxClaimablePerWallet is set to 0, and all addresses in the allowlist have max claimable 0. This means that no one can claim.")});const{snapshotInfos:d,sortedConditions:g}=await At(m,0,t.contractWrapper.getProvider(),t.storage,t.getSnapshotFormatVersion());return d.forEach(s=>{e[s.merkleRoot]=s.snapshotUri}),{tokenId:p,sortedConditions:g}})),i=await t.metadata.get(),c=[];for(const o of Object.keys(i.merkle||{}))e[o]=i.merkle[o];if(!Mt(i.merkle,e)){const o=await t.metadata.parseInputMetadata({...i,merkle:e}),p=await t.metadata._parseAndUploadMetadata(o);if(v("setContractURI",t.contractWrapper)){const h=new T(t.contractWrapper);c.push(h.encode("setContractURI",[p]))}else throw new Error("Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.")}if(n.forEach(o=>{let{tokenId:p,sortedConditions:h}=o;const m=new T(t.contractWrapper);if(t.isLegacySinglePhaseDrop(t.contractWrapper)){const d=new T(t.contractWrapper);c.push(d.encode("setClaimConditions",[p,$(h[0]),r]))}else if(t.isLegacyMultiPhaseDrop(t.contractWrapper))c.push(m.encode("setClaimConditions",[p,h.map($),r]));else if(t.isNewSinglePhaseDrop(t.contractWrapper))c.push(m.encode("setClaimConditions",[p,V(h[0]),r]));else if(t.isNewMultiphaseDrop(t.contractWrapper))c.push(m.encode("setClaimConditions",[p,h.map(V),r]));else throw new Error("Contract does not support claim conditions")}),v("multicall",t.contractWrapper))return w.fromContractWrapper({contractWrapper:t.contractWrapper,method:"multicall",args:[c]});throw new Error("Contract does not support multicall")}})());update=l(async(t,a,r)=>{const e=await this.getAll(t),n=await St(a,r,e);return await this.set.prepare(t,n)});async prepareClaim(t,a,r,e){const n=await u(e||await this.contractWrapper.getSignerAddress());return Pt(n,a,await this.getActive(t),async()=>(await this.metadata.get()).merkle,0,this.contractWrapper,this.storage,r,this.getSnapshotFormatVersion())}async getClaimArguments(t,a,r,e){const n=await u(a);return this.isLegacyMultiPhaseDrop(this.contractWrapper)?[n,t,r,e.currencyAddress,e.price,e.proofs,e.maxClaimable]:this.isLegacySinglePhaseDrop(this.contractWrapper)?[n,t,r,e.currencyAddress,e.price,{proof:e.proofs,maxQuantityInAllowlist:e.maxClaimable},L("")]:[n,t,r,e.currencyAddress,e.price,{proof:e.proofs,quantityLimitPerWallet:e.maxClaimable,pricePerToken:e.priceInProof,currency:e.currencyAddressInProof},L("")]}async getClaimTransaction(t,a,r,e){if(e?.pricePerToken)throw new Error("Price per token should be set via claim conditions by calling `contract.erc1155.claimConditions.set()`");const n=await this.prepareClaim(a,r,e?.checkERC20Allowance||!0);return w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"claim",args:await this.getClaimArguments(a,t,r,n),overrides:n.overrides})}isNewSinglePhaseDrop(t){return y(t,"ERC1155ClaimConditionsV2")}isNewMultiphaseDrop(t){return y(t,"ERC1155ClaimPhasesV2")}isLegacySinglePhaseDrop(t){return y(t,"ERC1155ClaimConditionsV1")}isLegacyMultiPhaseDrop(t){return y(t,"ERC1155ClaimPhasesV1")}getSnapshotFormatVersion(){return this.isLegacyMultiPhaseDrop(this.contractWrapper)||this.isLegacySinglePhaseDrop(this.contractWrapper)?Q.V1:Q.V2}}const Z=lt({address:ut,quantity:dt.default(1)}),Nt=rt([B(pt()).transform(async E=>await Promise.all(E.map(t=>Z.parseAsync({address:t})))),B(Z)]);class Dt{featureName=x.name;constructor(t){this.contractWrapper=t}async getClaimTransaction(t,a,r,e){let n={};return e&&e.pricePerToken&&(n=await Ct(this.contractWrapper,e.pricePerToken,r,e.currencyAddress,e.checkERC20Allowance)),w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"claim",args:[await u(t),a,r],overrides:n})}to=l(async(t,a,r,e)=>await this.getClaimTransaction(t,a,r,e))}class Rt{featureName=q.name;constructor(t,a){this.contractWrapper=t,this.storage=a;const r=new mt(this.contractWrapper,ht,this.storage);this.conditions=new vt(t,r,this.storage)}to=l(async(t,a,r,e)=>await this.conditions.getClaimTransaction(t,a,r,e))}class xt{featureName=G.name;constructor(t,a,r){this.contractWrapper=t,this.storage=a,this.roles=r}mint=l(async t=>{const a=t.payload,r=t.signature,[e,n]=await Promise.all([this.mapPayloadToContractStruct(a),this.contractWrapper.getCallOverrides()]);return await It(this.contractWrapper,e.pricePerToken.mul(e.quantity),a.currencyAddress,n),w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintWithSignature",args:[e,r],overrides:n,parse:i=>{const c=this.contractWrapper.parseLogs("TokensMintedWithSignature",i.logs);if(c.length===0)throw new Error("No MintWithSignature event found");return{id:c[0].args.tokenIdMinted,receipt:i}}})});mintBatch=l(async t=>{const a=await Promise.all(t.map(i=>this.mapPayloadToContractStruct(i.payload))),r=t.map((i,c)=>{const o=a[c],p=i.signature,h=i.payload.price;if(C.from(h).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:o,signature:p}}),e=new T(this.contractWrapper),n=r.map(i=>e.encode("mintWithSignature",[i.message,i.signature]));if(v("multicall",this.contractWrapper))return w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[n],parse:i=>{const c=this.contractWrapper.parseLogs("TokensMintedWithSignature",i.logs);if(c.length===0)throw new Error("No MintWithSignature event found");return c.map(o=>({id:o.args.tokenIdMinted,receipt:i}))}});throw new Error("Multicall not supported on this contract!")});async verify(t){const a=t.payload,r=t.signature,e=await this.mapPayloadToContractStruct(a);return(await this.contractWrapper.read("verify",[e,r]))[0]}async generate(t){const a={...t,tokenId:P};return this.generateFromTokenId(a)}async generateFromTokenId(t){return(await this.generateBatchFromTokenIds([t]))[0]}async generateBatch(t){const a=t.map(r=>({...r,tokenId:P}));return this.generateBatchFromTokenIds(a)}async generateBatchFromTokenIds(t){const a=this.contractWrapper.getSigner();it(a),await this.roles?.verify(["minter"],await a.getAddress());const r=await Promise.all(t.map(d=>Wt.parseAsync(d))),e=r.map(d=>d.metadata),[n,i,c]=await Promise.all([N(e,this.storage),this.contractWrapper.getChainID(),J(this.contractWrapper.address,this.contractWrapper.getProvider())]),o=await Promise.all(r.map((d,g)=>bt.parseAsync({...d,uri:n[g]}))),p=await Promise.all(o.map(d=>this.mapPayloadToContractStruct(d))),h=c?.type==="TokenERC1155";return(await Promise.all(p.map(d=>this.contractWrapper.signTypedData(a,{name:h?"TokenERC1155":"SignatureMintERC1155",version:"1",chainId:i,verifyingContract:this.contractWrapper.address},{MintRequest:Et},d)))).map((d,g)=>({payload:o[g],signature:d.toString()}))}async mapPayloadToContractStruct(t){const a=await st(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,tokenId:t.tokenId,uri:t.uri,quantity:t.quantity,pricePerToken:a,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}}class Lt{featureName=S.name;constructor(t){this.contractWrapper=t}tokens=l(async(t,a)=>{const r=await this.contractWrapper.getSignerAddress();return this.from.prepare(r,t,a)});from=l(async(t,a,r)=>w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burn",args:[await u(t),a,r]}));batch=l(async(t,a)=>{const r=await this.contractWrapper.getSignerAddress();return this.batchFrom.prepare(r,t,a)});batchFrom=l(async(t,a,r)=>w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burnBatch",args:[await u(t),a,r]}))}class kt{featureName=A.name;constructor(t,a){this.erc1155=t,this.contractWrapper=a}async all(t){const a=C.from(t?.start||0).toNumber(),r=C.from(t?.count||F).toNumber(),e=Math.min((await this.totalCount()).toNumber(),a+r);return await Promise.all([...Array(e-a).keys()].map(n=>this.erc1155.get((a+n).toString())))}async totalCount(){return await this.contractWrapper.read("nextTokenIdToMint",[])}async totalCirculatingSupply(t){return await this.contractWrapper.read("totalSupply",[t])}async owned(t,a){const[r,e]=await Promise.all([u(t||await this.contractWrapper.getSignerAddress()),this.contractWrapper.read("nextTokenIdToMint",[])]);let i=(await this.contractWrapper.read("balanceOfBatch",[Array(e.toNumber()).fill(r),Array.from(Array(e.toNumber()).keys())])).map((o,p)=>({tokenId:p,balance:o})).filter(o=>o.balance.gt(0));if(a){const o=a?.start||0,p=a?.count||F;i=i.slice(o,o+p)}return(await Promise.all(i.map(o=>this.erc1155.get(o.tokenId.toString())))).map((o,p)=>({...o,owner:r,quantityOwned:i[p].balance.toString()}))}}class Bt{featureName=Y.name;constructor(t,a,r){this.erc1155=t,this.contractWrapper=a,this.storage=r,this.revealer=this.detectErc1155Revealable()}lazyMint=l(async(t,a)=>{const r=await this.erc1155.nextTokenIdToMint(),e=await N(t,this.storage,r.toNumber(),a),n=e[0].substring(0,e[0].lastIndexOf("/"));for(let o=0;o<e.length;o++){const p=e[o].substring(0,e[o].lastIndexOf("/"));if(n!==p)throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${n}' but got '${p}'`)}const i=o=>{const p=this.contractWrapper.parseLogs("TokensLazyMinted",o?.logs),h=p[0].args.startTokenId,m=p[0].args.endTokenId,d=[];for(let g=h;g.lte(m);g=g.add(1))d.push({id:g,receipt:o,data:()=>this.erc1155.getTokenMetadata(g)});return d},c=await J(this.contractWrapper.address,this.contractWrapper.getProvider());return this.isLegacyEditionDropContract(this.contractWrapper,c)?w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"lazyMint",args:[e.length,`${n.endsWith("/")?n:`${n}/`}`],parse:i}):w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"lazyMint",args:[e.length,`${n.endsWith("/")?n:`${n}/`}`,L("")],parse:i})});updateMetadata=l(async(t,a,r)=>{const e=await this.contractWrapper.read("getBaseURICount",[]);if(e.eq(0))throw new Error("No base URI set. Please set a base URI before updating metadata");const n=C.from(t);let i=C.from(0),c=C.from(0),o=0;for(let s=0;s<e.toNumber()&&(o=s,c=await this.contractWrapper.read("getBatchIdAtIndex",[o]),!c.gt(n));s++)i=c;const p=Array.from({length:c.sub(i).toNumber()},(s,f)=>f+i.toNumber()),h=await Promise.all(p.map(s=>this.erc1155.getTokenMetadata(s))),m=[];for(let s=0;s<h.length;s++){const{id:f,uri:D,...X}=h[s];C.from(n).eq(C.from(f))?m.push(a):m.push(X)}const d=await N(m,this.storage,i.toNumber(),r),g=d[0].substring(0,d[0].lastIndexOf("/"));return w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateBatchBaseURI",args:[o,`${g.endsWith("/")?g:`${g}/`}`]})});detectErc1155Revealable(){if(y(this.contractWrapper,"ERC1155Revealable"))return new wt(this.contractWrapper,this.storage,K.name,()=>this.erc1155.nextTokenIdToMint())}isLegacyEditionDropContract(t,a){return a&&a.type==="DropERC1155"&&a.version<3||!1}}class Ft{featureName=j.name;constructor(t,a,r){this.erc1155=t,this.contractWrapper=a,this.storage=r}to=l(async(t,a)=>{const r=a.map(p=>p.metadata),e=a.map(p=>p.supply),n=await N(r,this.storage),i=await u(t),c=new T(this.contractWrapper),o=await Promise.all(n.map(async(p,h)=>c.encode("mintTo",[i,P,p,e[h]])));return w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[o],parse:p=>{const h=this.contractWrapper.parseLogs("TokensMinted",p.logs);if(h.length===0||h.length<r.length)throw new Error("TokenMinted event not found, minting failed");return h.map(m=>{const d=m.args.tokenIdMinted;return{id:d,receipt:p,data:()=>this.erc1155.get(d)}})}})})}class _t{featureName=M.name;constructor(t,a,r){this.erc1155=t,this.contractWrapper=a,this.storage=r,this.batch=this.detectErc1155BatchMintable()}to=l(async(t,a)=>{const r=await this.getMintTransaction(t,a);return r.setParse(e=>{const n=this.contractWrapper.parseLogs("TransferSingle",e?.logs);if(n.length===0)throw new Error("TransferSingleEvent event not found");const i=n[0].args.id;return{id:i,receipt:e,data:()=>this.erc1155.get(i.toString())}}),r});async getMintTransaction(t,a){const r=await yt(a.metadata,this.storage);return w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:[await u(t),P,r,a.supply]})}additionalSupplyTo=l(async(t,a,r)=>{const e=await this.erc1155.getTokenMetadata(a);return w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:[await u(t),a,e.uri,r],parse:n=>({id:C.from(a),receipt:n,data:()=>this.erc1155.get(a)})})});detectErc1155BatchMintable(){if(y(this.contractWrapper,"ERC1155BatchMintable"))return new Ft(this.erc1155,this.contractWrapper,this.storage)}}class Ht{featureName=tt.name;get chainId(){return this._chainId}constructor(t,a,r){this.contractWrapper=t,this.storage=a,this.query=this.detectErc1155Enumerable(),this.mintable=this.detectErc1155Mintable(),this.burnable=this.detectErc1155Burnable(),this.lazyMintable=this.detectErc1155LazyMintable(),this.signatureMintable=this.detectErc1155SignatureMintable(),this.claimCustom=this.detectErc1155Claimable(),this.claimWithConditions=this.detectErc1155ClaimableWithConditions(),this._chainId=r}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async get(t){const[a,r]=await Promise.all([this.contractWrapper.read("totalSupply",[t]).catch(()=>C.from(0)),this.getTokenMetadata(t).catch(()=>({id:t.toString(),uri:"",...gt}))]);return{owner:H,metadata:r,type:"ERC1155",supply:a.toString()}}async totalSupply(t){if(y(this.contractWrapper,"ERC1155Supply"))return await this.contractWrapper.read("totalSupply",[t]);throw new I(at)}async balanceOf(t,a){return await this.contractWrapper.read("balanceOf",[await u(t),a])}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isApproved(t,a){return await this.contractWrapper.read("isApprovedForAll",[await u(t),await u(a)])}transfer=l((()=>{var t=this;return async function(a,r,e){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:[0];const i=await t.contractWrapper.getSignerAddress();return w.fromContractWrapper({contractWrapper:t.contractWrapper,method:"safeTransferFrom",args:[i,await u(a),r,e,n]})}})());transferBatch=l((()=>{var t=this;return async function(a,r,e,n){let i=arguments.length>4&&arguments[4]!==void 0?arguments[4]:[0];const c=n?await u(n):await t.contractWrapper.getSignerAddress();return w.fromContractWrapper({contractWrapper:t.contractWrapper,method:"safeBatchTransferFrom",args:[c,await u(a),r,e,i]})}})());transferFrom=l((()=>{var t=this;return async function(a,r,e,n){let i=arguments.length>4&&arguments[4]!==void 0?arguments[4]:[0];return w.fromContractWrapper({contractWrapper:t.contractWrapper,method:"safeTransferFrom",args:[await u(a),await u(r),e,n,i]})}})());setApprovalForAll=l(async(t,a)=>w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setApprovalForAll",args:[t,a]}));airdrop=l((()=>{var t=this;return async function(a,r,e){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:[0];const i=e?await u(e):await t.contractWrapper.getSignerAddress(),c=await t.balanceOf(i,a),o=await Nt.parseAsync(r),p=o.reduce((d,g)=>C.from(d).add(C.from(g?.quantity||1)),C.from(0));if(c.lt(C.from(p)))throw new Error(`The caller owns ${c.toString()} NFTs, but wants to airdrop ${p.toString()} NFTs.`);const h=new T(t.contractWrapper),m=o.map(d=>{let{address:g,quantity:s}=d;return h.encode("safeTransferFrom",[i,g,a,s,n])});return w.fromContractWrapper({contractWrapper:t.contractWrapper,method:"multicall",args:[m]})}})());async nextTokenIdToMint(){if(v("nextTokenIdToMint",this.contractWrapper))return await this.contractWrapper.read("nextTokenIdToMint",[]);throw new Error("Contract requires the `nextTokenIdToMint` function available to determine the next token ID to mint")}async getAll(t){return W(this.query,A).all(t)}async totalCount(){return W(this.query,A).totalCount()}async totalCirculatingSupply(t){return W(this.query,A).totalCirculatingSupply(t)}async getOwned(t,a){return t&&(t=await u(t)),W(this.query,A).owned(t,a)}mint=l(async t=>this.mintTo.prepare(await this.contractWrapper.getSignerAddress(),t));mintTo=l(async(t,a)=>W(this.mintable,M).to.prepare(t,a));async getMintTransaction(t,a){return W(this.mintable,M).getMintTransaction(t,a)}mintAdditionalSupply=l(async(t,a)=>W(this.mintable,M).additionalSupplyTo.prepare(await this.contractWrapper.getSignerAddress(),t,a));mintAdditionalSupplyTo=l(async(t,a,r)=>W(this.mintable,M).additionalSupplyTo.prepare(t,a,r));mintBatch=l(async t=>this.mintBatchTo.prepare(await this.contractWrapper.getSignerAddress(),t));mintBatchTo=l(async(t,a)=>W(this.mintable?.batch,j).to.prepare(t,a));burn=l(async(t,a)=>W(this.burnable,S).tokens.prepare(t,a));burnFrom=l(async(t,a,r)=>W(this.burnable,S).from.prepare(t,a,r));burnBatch=l(async(t,a)=>W(this.burnable,S).batch.prepare(t,a));burnBatchFrom=l(async(t,a,r)=>W(this.burnable,S).batchFrom.prepare(t,a,r));lazyMint=l(async(t,a)=>W(this.lazyMintable,Y).lazyMint.prepare(t,a));updateMetadata=l(async(t,a)=>{if(this.lazyMintable)return this.lazyMintable.updateMetadata.prepare(t,a);if(y(this.contractWrapper,"ERC1155UpdatableMetadata")){const r=await this.storage.upload(a);return w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setTokenURI",args:[t,r]})}else throw new I(et)});async getClaimTransaction(t,a,r,e){const n=this.claimWithConditions,i=this.claimCustom;if(n)return n.conditions.getClaimTransaction(t,a,r,e);if(i)return i.getClaimTransaction(t,a,r,e);throw new I(x)}claim=l(async(t,a,r)=>this.claimTo.prepare(await this.contractWrapper.getSignerAddress(),t,a,r));claimTo=l(async(t,a,r,e)=>{const n=this.claimWithConditions,i=this.claimCustom;if(n)return n.to.prepare(t,a,r,e);if(i)return i.to.prepare(t,a,r,e);throw new I(x)});get claimConditions(){return W(this.claimWithConditions,q).conditions}get signature(){return W(this.signatureMintable,G)}get revealer(){return W(this.lazyMintable?.revealer,K)}async getTokenMetadata(t){const a=await this.contractWrapper.read("uri",[t]);if(!a)throw new nt;return ft(t,a,this.storage)}detectErc1155Enumerable(){if(y(this.contractWrapper,"ERC1155Enumerable"))return new kt(this,this.contractWrapper)}detectErc1155Mintable(){if(y(this.contractWrapper,"ERC1155Mintable"))return new _t(this,this.contractWrapper,this.storage)}detectErc1155Burnable(){if(y(this.contractWrapper,"ERC1155Burnable"))return new Lt(this.contractWrapper)}detectErc1155LazyMintable(){if(y(this.contractWrapper,"ERC1155LazyMintableV1")||y(this.contractWrapper,"ERC1155LazyMintableV2"))return new Bt(this,this.contractWrapper,this.storage)}detectErc1155SignatureMintable(){if(y(this.contractWrapper,"ERC1155SignatureMintable"))return new xt(this.contractWrapper,this.storage)}detectErc1155Claimable(){if(y(this.contractWrapper,"ERC1155ClaimCustom"))return new Dt(this.contractWrapper)}detectErc1155ClaimableWithConditions(){if(y(this.contractWrapper,"ERC1155ClaimConditionsV1")||y(this.contractWrapper,"ERC1155ClaimConditionsV2")||y(this.contractWrapper,"ERC1155ClaimPhasesV1")||y(this.contractWrapper,"ERC1155ClaimPhasesV2"))return new Rt(this.contractWrapper,this.storage)}}export{vt as D,xt as E,Ht as a};
