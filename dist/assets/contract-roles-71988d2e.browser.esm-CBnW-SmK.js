import{ax as C,q as i,k as d,m as g,j as k,v as l,T as f,ay as P}from"./index-CRXhB-tn.js";import{h as A}from"./contract-appuri-5c40af52.browser.esm-iXrARNet.js";class N{featureName=C.name;constructor(e,t){this.contractWrapper=e,this.roles=t}async getAll(){i(this.roles.length);const e={},t=Object.entries(this.roles);return(await Promise.all(t.map(r=>{let[,o]=r;return this.get(o)}))).forEach((r,o)=>e[t[o][1]]=r),e}async get(e){i(this.roles.includes(e));const t=this.contractWrapper;if(A("getRoleMemberCount",t)&&A("getRoleMember",t)){const r=d(e),o=(await t.read("getRoleMemberCount",[r])).toNumber();return await Promise.all(Array.from(Array(o).keys()).map(a=>t.read("getRoleMember",[r,a])))}throw new Error("Contract does not support enumerating roles. Please implement IPermissionsEnumerable to unlock this functionality.")}setAll=g(async(e,t)=>{const r=t||await this.contractWrapper.getSignerAddress(),o=new k(this.contractWrapper),a=Object.keys(e);i(a.length),i(a.every(n=>this.roles.includes(n)));const p=await this.getAll(),u=[],w=a.sort(n=>n==="admin"?1:-1);for(let n=0;n<w.length;n++){const m=w[n],[R,v]=await Promise.all([Promise.all(e[m]?.map(s=>l(s))||[]),Promise.all(p[m]?.map(s=>l(s))||[])]),y=R.filter(s=>!v.includes(s)),c=v.filter(s=>!R.includes(s));if(c.length>1){const s=c.indexOf(r);s>-1&&(c.splice(s,1),c.push(r))}y.length&&y.forEach(s=>{u.push(o.encode("grantRole",[d(m),s]))}),c.length&&(await Promise.all(c.map(h=>this.getRevokeRoleFunctionName(h)))).forEach((h,W)=>u.push(o.encode(h,[d(m),c[W]])))}return f.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[u]})});async verify(e,t){await Promise.all(e.map(async r=>{const[o,a]=await Promise.all([this.get(r),l(t)]);if(!o.map(p=>p.toLowerCase()).includes(a.toLowerCase()))throw new P(a,r)}))}grant=g(async(e,t)=>{i(this.roles.includes(e));const r=await l(t);return f.fromContractWrapper({contractWrapper:this.contractWrapper,method:"grantRole",args:[d(e),r]})});revoke=g(async(e,t)=>{i(this.roles.includes(e));const r=await l(t),o=await this.getRevokeRoleFunctionName(r);return f.fromContractWrapper({contractWrapper:this.contractWrapper,method:o,args:[d(e),r]})});async getRevokeRoleFunctionName(e){const[t,r]=await Promise.all([l(e),this.contractWrapper.getSignerAddress()]);return r.toLowerCase()===t.toLowerCase()?"renounceRole":"revokeRole"}}export{N as C};
