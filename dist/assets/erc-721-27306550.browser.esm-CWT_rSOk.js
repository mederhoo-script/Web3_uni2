import{bi as nt,l as N,v as f,m as p,T as u,bj as S,B as T,bk as $,bl as V,bm as Q,bn as F,bo as Y,bp as j,ai as O,bq as U,br as J,bs as G,bt as H,Y as K,bu as X,aN as st,j as q,q as tt,x as v,aq as k,ar as P,as as D,aU as it,bv as ct,bw as z,bx as ot,by as pt,aY as dt,a$ as ht,a1 as lt,$ as ut,aT as mt,bz as gt,a2 as yt}from"./index-CRXhB-tn.js";import{a as W}from"./assertEnabled-d1700f0b.browser.esm-CuId8uDg.js";import{h as C,d as l,C as Wt}from"./contract-appuri-5c40af52.browser.esm-iXrARNet.js";import{F as ft,b as Tt,c as M,D as R,u as rt,g as A}from"./QueryParams-32a56510.browser.esm-CJ0DYI-a.js";import{D as wt}from"./drop-claim-conditions-e6f2abbf.browser.esm-Dk2Ztl9z.js";import{D as Ct,c as Et}from"./contract-owner-49e75547.browser.esm-BuMVgBnJ.js";import{s as L,C as Z,B as bt}from"./setErc20Allowance-7f76f677.browser.esm-DleMWaY1.js";import{j as It,k as Mt,m as St,o as kt,B as At}from"./index-CD3KUISV.js";class Nt{featureName=Q.name;constructor(t){this.contractWrapper=t}token=p(async t=>u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burn",args:[t]}))}class vt{featureName=J.name;constructor(t,r,a){this.erc721=t,this.contractWrapper=r,this.storage=a;const e=new Wt(this.contractWrapper,it,this.storage);this.conditions=new wt(this.contractWrapper,e,this.storage)}to=p(async(t,r,a)=>{const e=await this.conditions.getClaimTransaction(t,r,a);return e.setParse(s=>{const i=this.contractWrapper.parseLogs("TokensClaimed",s?.logs)[0].args.startTokenId,o=i.add(r),d=[];for(let c=i;c.lt(o);c=c.add(1))d.push({id:c,receipt:s,data:()=>this.erc721.get(c)});return d}),e})}function Rt(g){return gt(yt.parse(g))}class Pt{featureName=ct.name;constructor(t,r){this.erc721=t,this.contractWrapper=r}to=p(async(t,r,a)=>{const e=await this.contractWrapper.getSigner()?.getAddress();if(t!==e)throw new Error("Zora Drop: Destination address must match connected wallet address");if(a?.pricePerToken)throw new Error("Zora Drop: Custom pricePerToken is not supported. Price is automatically calculated");const n=(await this.getSaleDetails()).publicSalePrice,i=Rt("0.000777"),o=T.from(n).add(i).mul(r),d=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"purchase",args:[r],overrides:{value:o}});return d.setParse(c=>{const m=this.contractWrapper.parseLogs("Sale",c?.logs)[0].args.firstPurchasedTokenId,E=m.add(r),y=[];for(let w=m;w.lt(E);w=w.add(1))y.push({id:w,receipt:c,data:()=>this.erc721.get(w)});return y}),d});async getSaleDetails(){return this.contractWrapper.read("saleDetails",[])}}class Ft{featureName=U.name;constructor(t,r){this.erc721=t,this.contractWrapper=r}async getClaimTransaction(t,r,a){let e={};return a&&a.pricePerToken&&(e=await Et(this.contractWrapper,a.pricePerToken,r,a.currencyAddress,a.checkERC20Allowance)),u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"claim",args:[t,r],overrides:e})}to=p(async(t,r,a)=>{const e=await this.getClaimTransaction(t,r,a);return e.setParse(s=>{const i=this.contractWrapper.parseLogs("TokensClaimed",s?.logs)[0].args.startTokenId,o=i.add(r),d=[];for(let c=i;c.lt(o);c=c.add(1))d.push({id:c,receipt:s,data:()=>this.erc721.get(c)});return d}),e})}class Ut{featureName=Y.name;constructor(t,r,a){this.erc721=t,this.contractWrapper=r,this.storage=a,this.revealer=this.detectErc721Revealable()}lazyMint=p(async(t,r)=>{const a=await this.erc721.nextTokenIdToMint(),e=await M(t,this.storage,a.toNumber(),r),s=A(e);return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"lazyMint",args:[e.length,s.endsWith("/")?s:`${s}/`,k("")],parse:n=>{const i=this.contractWrapper.parseLogs("TokensLazyMinted",n?.logs),o=i[0].args.startTokenId,d=i[0].args.endTokenId,c=[];for(let h=o;h.lte(d);h=h.add(1))c.push({id:h,receipt:n,data:()=>this.erc721.getTokenMetadata(h)});return c}})});updateMetadata=p(async(t,r,a)=>{const e=await this.contractWrapper.read("getBaseURICount",[]);if(e.eq(0))throw new Error("No base URI set. Please set a base URI before updating metadata");const s=T.from(t);let n=T.from(0),i=T.from(0),o=0;for(let y=0;y<e.toNumber()&&(o=y,i=await this.contractWrapper.read("getBatchIdAtIndex",[o]),!i.gt(s));y++)n=i;const d=Array.from({length:i.sub(n).toNumber()},(y,w)=>w+n.toNumber()),c=await Promise.all(d.map(y=>this.erc721.getTokenMetadata(y))),h=[];for(let y=0;y<c.length;y++){const{id:w,uri:_,...b}=c[y];T.from(s).eq(T.from(w))?h.push(r):h.push(b)}const m=await M(h,this.storage,n.toNumber(),a),E=m[0].substring(0,m[0].lastIndexOf("/"));return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateBatchBaseURI",args:[o,`${E.endsWith("/")?E:`${E}/`}`]})});detectErc721Revealable(){if(l(this.contractWrapper,"ERC721Revealable"))return new Ct(this.contractWrapper,this.storage,K.name,()=>this.erc721.nextTokenIdToMint())}}class Lt{featureName=F.name;constructor(t){this.contractWrapper=t}cancel=p(async t=>u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancel",args:[t]}));revoke=p(async t=>u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"revoke",args:[t]}))}class _t{featureName=j.name;constructor(t,r){this.contractWrapper=t,this.storage=r}update=p(async(t,r)=>{const a=await rt(r,this.storage);return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setTokenURI",args:[t,a]})})}class Bt{featureName=V.name;constructor(t,r,a){this.erc721=t,this.contractWrapper=r,this.storage=a}to=p(async(t,r)=>{const[a,e]=await Promise.all([M(r,this.storage),f(t)]),s=new q(this.contractWrapper),n=a.map(i=>s.encode("mintTo",[e,i]));return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[n],parse:i=>{const o=this.contractWrapper.parseLogs("TokensMinted",i.logs);if(o.length===0||o.length<r.length)throw new Error("TokenMinted event not found, minting failed");return o.map(d=>{const c=d.args.tokenIdMinted;return{id:c,receipt:i,data:()=>this.erc721.get(c)}})}})})}class xt{featureName=$.name;constructor(t,r,a){this.erc721=t,this.contractWrapper=r,this.storage=a,this.batch=this.detectErc721BatchMintable()}to=p(async(t,r)=>{const[a,e]=await Promise.all([rt(r,this.storage),f(t)]);return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:[e,a],parse:s=>{const n=this.contractWrapper.parseLogs("Transfer",s?.logs);if(n.length===0)throw new Error("TransferEvent event not found");const i=n[0].args.tokenId;return{id:i,receipt:s,data:()=>this.erc721.get(i)}}})});async getMintTransaction(t,r){return this.to.prepare(await f(t),r)}detectErc721BatchMintable(){if(l(this.contractWrapper,"ERC721BatchMintable"))return new Bt(this.erc721,this.contractWrapper,this.storage)}}class Ot{featureName=X.name;constructor(t,r){this.contractWrapper=t,this.storage=r}async get(){const t=await this.contractWrapper.read("sharedMetadata",[]);if(!t.every(r=>r===""))return{name:t.name,description:t.description,image:t.imageURI,animation_url:t.animationURI}}set=p(async t=>{const r=bt.parse(t);r.description=this.sanitizeJSONString(r.description);const a=[];z(r.image)?a.push(this.storage.upload(r.image)):typeof r.image=="string"?a.push(Promise.resolve(r.image)):a.push(Promise.resolve(void 0)),z(r.animation_url)?a.push(this.storage.upload(r.animation_url)):typeof r.animation_url=="string"?a.push(Promise.resolve(r.animation_url)):a.push(Promise.resolve(void 0));const[e,s]=await Promise.all(a);return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setSharedMetadata",args:[{name:`${r.name||""}`,description:r.description||"",imageURI:e||"",animationURI:s||""}]})});sanitizeJSONString(t){if(!t)return t;const r=JSON.stringify(t);return r.slice(1,r.length-1)}}class Dt{featureName=ot.name;constructor(t,r){this.erc721=t,this.contractWrapper=r}async all(t,r){let a=await this.tokenIds(t);if(r){const e=r?.start||0,s=r?.count||R;a=a.slice(e,e+s)}return await Promise.all(a.map(e=>this.erc721.get(e.toString())))}async tokenIds(t){const r=await f(t||await this.contractWrapper.getSignerAddress()),a=await this.contractWrapper.read("balanceOf",[r]),e=Array.from(Array(a.toNumber()).keys());return await Promise.all(e.map(s=>this.contractWrapper.read("tokenOfOwnerByIndex",[r,s])))}}class zt{featureName=pt.name;constructor(t,r){this.erc721=t,this.contractWrapper=r}async all(t,r){let a=await this.tokenIds(t);if(r){const e=r?.start||0,s=r?.count||R;a=a.slice(e,e+s)}return await Promise.all(a.map(e=>this.erc721.get(e.toString())))}async tokenIds(t){const r=await f(t||await this.contractWrapper.getSignerAddress());return await this.contractWrapper.read("tokensOfOwner",[r])}}class Zt{featureName=S.name;constructor(t,r){this.erc721=t,this.contractWrapper=r,this.owned=this.detectErc721Owned()}async all(t){let r=T.from(0);C("startTokenId",this.contractWrapper)&&(r=await this.contractWrapper.read("startTokenId",[]));const a=T.from(t?.start||0).add(r).toNumber(),e=T.from(t?.count||R).toNumber(),s=await this.erc721.nextTokenIdToMint(),n=Math.min(s.add(r).toNumber(),a+e);return await Promise.all([...Array(n-a).keys()].map(i=>this.erc721.get((a+i).toString())))}async allOwners(t){let r,a=T.from(0);C("startTokenId",this.contractWrapper)&&(a=await this.contractWrapper.read("startTokenId",[]));try{r=await this.erc721.totalClaimedSupply()}catch{r=await this.totalCount()}r=r.add(a);let e=[...new Array(r.toNumber()).keys()];if(t){const n=t?.start||0,i=t?.count||R;e=e.slice(n,n+i)}const s=await Promise.all(e.map(n=>this.erc721.ownerOf(n).catch(()=>N)));return e.map(n=>({tokenId:n,owner:s[n]})).filter(n=>n.owner!==N)}async totalCount(){return await this.erc721.nextTokenIdToMint()}async totalCirculatingSupply(){return await this.contractWrapper.read("totalSupply",[])}detectErc721Owned(){if(l(this.contractWrapper,"ERC721Enumerable"))return new Dt(this.erc721,this.contractWrapper);if(l(this.contractWrapper,"ERC721AQueryable"))return new zt(this.erc721,this.contractWrapper)}}const $t=At.extend({tierPriority:ut(mt()),royaltyRecipient:lt.default(N),royaltyBps:ht.default(0),quantity:dt.default(1)}),Vt=[{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"},{name:"data",type:"bytes"}];class Qt{featureName=G.name;constructor(t,r,a){this.erc721=t,this.contractWrapper=r,this.storage=a}async getMetadataInTier(t){const a=(await this.contractWrapper.read("getMetadataForAllTiers",[])).find(s=>s.tier===t);if(!a)throw new Error("Tier not found in contract.");return await Promise.all(a.ranges.map((s,n)=>{const i=[],o=a.baseURIs[n];for(let d=s.startIdInclusive.toNumber();d<s.endIdNonInclusive.toNumber();d++){const c=o.endsWith("/")?`${o}${d}`:`${o}/${d}`,h=this.storage.downloadJSON(c);i.push(h)}return i}).flat())}async getTokensInTier(t){const r=await this.contractWrapper.read("getTokensInTierLen",[]);if(r.eq(0))return[];const a=await this.contractWrapper.read("getTokensInTier",[t,0,r]);return await Promise.all(a.map(s=>{const n=[];for(let i=s.startIdInclusive.toNumber();i<s.endIdNonInclusive.toNumber();i++)n.push(this.erc721.get(i));return n}).flat())}createBatchWithTier=p(async(t,r,a)=>{const e=await this.erc721.nextTokenIdToMint(),s=await M(t,this.storage,e.toNumber(),a),n=A(s);return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"lazyMint",args:[s.length,n.endsWith("/")?n:`${n}/`,r,k("")],parse:i=>{const o=this.contractWrapper.parseLogs("TokensLazyMinted",i?.logs),d=o[0].args[1],c=o[0].args[2],h=[];for(let m=d;m.lte(c);m=m.add(1))h.push({id:m,receipt:i,data:()=>this.erc721.getTokenMetadata(m)});return h}})});createDelayedRevealBatchWithTier=p(async(t,r,a,e,s)=>{if(!a)throw new Error("Password is required");const n=await this.storage.uploadBatch([Z.parse(t)],{rewriteFileNames:{fileStartNumber:0}}),i=A(n),o=await this.erc721.nextTokenIdToMint(),d=await this.storage.uploadBatch(r.map(b=>Z.parse(b)),{onProgress:s?.onProgress,rewriteFileNames:{fileStartNumber:o.toNumber()}}),c=A(d),h=await this.contractWrapper.read("getBaseURICount",[]),m=await this.contractWrapper.getChainID(),E=P(["string","uint256","uint256","address"],[a,m,h,this.contractWrapper.address]),y=await this.contractWrapper.read("encryptDecrypt",[k(c),E]),w=P(["bytes","bytes","uint256"],[k(c),E,m]),_=D.encode(["bytes","bytes32"],[y,w]);return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"lazyMint",args:[d.length,i.endsWith("/")?i:`${i}/`,e,_],parse:b=>{const B=this.contractWrapper.parseLogs("TokensLazyMinted",b?.logs),at=B[0].args[1],et=B[0].args[2],x=[];for(let I=at;I.lte(et);I=I.add(1))x.push({id:I,receipt:b,data:()=>this.erc721.getTokenMetadata(I)});return x}})});reveal=p(async(t,r)=>{if(!r)throw new Error("Password is required");const a=await this.contractWrapper.getChainID(),e=P(["string","uint256","uint256","address"],[r,a,t,this.contractWrapper.address]);try{const s=await this.contractWrapper.callStatic().reveal(t,e);if(!s.includes("://")||!s.endsWith("/"))throw new Error("invalid password")}catch{throw new Error("invalid password")}return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"reveal",args:[t,e]})});async generate(t){const[r]=await this.generateBatch([t]);return r}async generateBatch(t){const r=await Promise.all(t.map(s=>$t.parseAsync(s))),a=await this.contractWrapper.getChainID(),e=this.contractWrapper.getSigner();return tt(e),await Promise.all(r.map(async s=>{const n=await this.contractWrapper.signTypedData(e,{name:"SignatureAction",version:"1",chainId:a,verifyingContract:this.contractWrapper.address},{GenericRequest:Vt},await this.mapPayloadToContractStruct(s));return{payload:s,signature:n.toString()}}))}async verify(t){const r=await this.mapPayloadToContractStruct(t.payload);return(await this.contractWrapper.read("verify",[r,t.signature]))[0]}async claimWithSignature(t){const r=await this.mapPayloadToContractStruct(t.payload),a=await v(this.contractWrapper.getProvider(),t.payload.price,t.payload.currencyAddress),e=await this.contractWrapper.getCallOverrides();await L(this.contractWrapper,a,t.payload.currencyAddress,e);const s=await this.contractWrapper.sendTransaction("claimWithSignature",[r,t.signature],e),n=this.contractWrapper.parseLogs("TokensClaimed",s?.logs),i=n[0].args.startTokenId,o=i.add(n[0].args.quantityClaimed),d=[];for(let c=i;c.lt(o);c=c.add(1))d.push({id:c,receipt:s,data:()=>this.erc721.get(c)});return d}async mapPayloadToContractStruct(t){const r=await v(this.contractWrapper.getProvider(),t.price,t.currencyAddress),a=D.encode(["string[]","address","address","uint256","address","uint256","uint256","address"],[t.tierPriority,t.to,t.royaltyRecipient,t.royaltyBps,t.primarySaleRecipient,t.quantity,r,t.currencyAddress]);return{uid:t.uid,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,data:a}}}class Yt{featureName=H.name;constructor(t,r){this.contractWrapper=t,this.storage=r}mint=p(async t=>{const r=t.payload,a=t.signature,e=await this.contractWrapper.getCallOverrides(),s=n=>{const i=this.contractWrapper.parseLogs("TokensMintedWithSignature",n.logs);if(i.length===0)throw new Error("No MintWithSignature event found");return{id:i[0].args.tokenIdMinted,receipt:n}};if(await this.isLegacyNFTContract()){const n=await this.mapLegacyPayloadToContractStruct(r),i=n.price;return await L(this.contractWrapper,i,r.currencyAddress,e),u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintWithSignature",args:[n,a],overrides:e,parse:s})}else{const n=await this.mapPayloadToContractStruct(r),i=n.pricePerToken.mul(n.quantity);return await L(this.contractWrapper,i,r.currencyAddress,e),u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintWithSignature",args:[n,a],overrides:e,parse:s})}});mintBatch=p(async t=>{const r=await this.isLegacyNFTContract(),a=(await Promise.all(t.map(n=>r?this.mapLegacyPayloadToContractStruct(n.payload):this.mapPayloadToContractStruct(n.payload)))).map((n,i)=>{const o=t[i],d=o.signature,c=o.payload.price;if(T.from(c).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:n,signature:d}}),e=new q(this.contractWrapper),s=a.map(n=>r?e.encode("mintWithSignature",[n.message,n.signature]):e.encode("mintWithSignature",[n.message,n.signature]));if(C("multicall",this.contractWrapper))return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[s],parse:n=>{const i=this.contractWrapper.parseLogs("TokensMintedWithSignature",n.logs);if(i.length===0)throw new Error("No MintWithSignature event found");return i.map(o=>({id:o.args.tokenIdMinted,receipt:n}))}});throw new Error("Multicall not available on this contract!")});async verify(t){const r=await this.isLegacyNFTContract(),a=t.payload,e=t.signature;let s,n;return r?(s=await this.mapLegacyPayloadToContractStruct(a),n=await this.contractWrapper.read("verify",[s,e])):(s=await this.mapPayloadToContractStruct(a),n=await this.contractWrapper.read("verify",[s,e])),n[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){const r=await this.isLegacyNFTContract(),a=await Promise.all(t.map(o=>It.parseAsync(o))),e=a.map(o=>o.metadata),s=await M(e,this.storage),n=await this.contractWrapper.getChainID(),i=this.contractWrapper.getSigner();return tt(i),await Promise.all(a.map(async(o,d)=>{const c=s[d],h=await Mt.parseAsync({...o,uri:c});let m;return r?m=await this.contractWrapper.signTypedData(i,{name:"TokenERC721",version:"1",chainId:n,verifyingContract:this.contractWrapper.address},{MintRequest:St},await this.mapLegacyPayloadToContractStruct(h)):m=await this.contractWrapper.signTypedData(i,{name:"SignatureMintERC721",version:"1",chainId:n,verifyingContract:await this.contractWrapper.address},{MintRequest:kt},await this.mapPayloadToContractStruct(h)),{payload:h,signature:m.toString()}}))}async mapPayloadToContractStruct(t){const r=await v(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient,uri:t.uri,quantity:t.quantity,pricePerToken:r,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid}}async mapLegacyPayloadToContractStruct(t){const r=await v(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,price:r,uri:t.uri,currency:t.currencyAddress,validityEndTimestamp:t.mintEndTime,validityStartTimestamp:t.mintStartTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}async isLegacyNFTContract(){return l(this.contractWrapper,"ERC721SignatureMintV1")}}class rr{featureName=nt.name;get chainId(){return this._chainId}constructor(t,r,a){this.contractWrapper=t,this.storage=r,this.query=this.detectErc721Enumerable(),this.mintable=this.detectErc721Mintable(),this.burnable=this.detectErc721Burnable(),this.lazyMintable=this.detectErc721LazyMintable(),this.tieredDropable=this.detectErc721TieredDrop(),this.signatureMintable=this.detectErc721SignatureMintable(),this.claimWithConditions=this.detectErc721ClaimableWithConditions(),this.claimCustom=this.detectErc721Claimable(),this.claimZora=this.detectErc721ClaimableZora(),this.erc721SharedMetadata=this.detectErc721SharedMetadata(),this.loyaltyCard=this.detectErc721LoyaltyCard(),this.updatableMetadata=this.detectErc721UpdatableMetadata(),this._chainId=a}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async get(t){const[r,a]=await Promise.all([this.ownerOf(t).catch(()=>N),this.getTokenMetadata(t).catch(()=>({id:t.toString(),uri:"",...ft}))]);return{owner:r,metadata:a,type:"ERC721",supply:"1"}}async ownerOf(t){return await this.contractWrapper.read("ownerOf",[t])}async balanceOf(t){return await this.contractWrapper.read("balanceOf",[await f(t)])}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async isApproved(t,r){const[a,e]=await Promise.all([f(t),f(r)]);return await this.contractWrapper.read("isApprovedForAll",[a,e])}transfer=p(async(t,r)=>{const[a,e]=await Promise.all([this.contractWrapper.getSignerAddress(),f(t)]);return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"transferFrom(address,address,uint256)",args:[a,e,r]})});transferFrom=p(async(t,r,a)=>{const[e,s]=await Promise.all([f(t),f(r)]);return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"transferFrom(address,address,uint256)",args:[e,s,a]})});setApprovalForAll=p(async(t,r)=>u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setApprovalForAll",args:[await f(t),r]}));setApprovalForToken=p(async(t,r)=>u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approve",args:[await f(t),r]}));async getAll(t){return W(this.query,S).all(t)}async getAllOwners(t){return W(this.query,S).allOwners(t)}async totalCount(){return this.nextTokenIdToMint()}async totalCirculatingSupply(){return W(this.query,S).totalCirculatingSupply()}async getOwned(t,r){if(t&&(t=await f(t)),this.query?.owned)return this.query.owned.all(t,r);{const[a,e]=await Promise.all([t||this.contractWrapper.getSignerAddress(),this.getAllOwners(r)]),s=(e||[]).filter(n=>a?.toLowerCase()===n.owner?.toLowerCase());return await Promise.all(s.map(async n=>this.get(n.tokenId)))}}async getOwnedTokenIds(t){if(t&&(t=await f(t)),this.query?.owned)return this.query.owned.tokenIds(t);{const[r,a]=await Promise.all([t||this.contractWrapper.getSignerAddress(),this.getAllOwners()]);return(a||[]).filter(e=>r?.toLowerCase()===e.owner?.toLowerCase()).map(e=>T.from(e.tokenId))}}mint=p(async t=>this.mintTo.prepare(await this.contractWrapper.getSignerAddress(),t));mintTo=p(async(t,r)=>W(this.mintable,$).to.prepare(t,r));async getMintTransaction(t,r){return this.mintTo.prepare(t,r)}mintBatch=p(async t=>this.mintBatchTo.prepare(await this.contractWrapper.getSignerAddress(),t));mintBatchTo=p(async(t,r)=>W(this.mintable?.batch,V).to.prepare(t,r));burn=p(async t=>W(this.burnable,Q).token.prepare(t));cancel=p(async t=>W(this.loyaltyCard,F).cancel.prepare(t));revoke=p(async t=>W(this.loyaltyCard,F).revoke.prepare(t));lazyMint=p(async(t,r)=>W(this.lazyMintable,Y).lazyMint.prepare(t,r));updateMetadata=p(async(t,r)=>this.lazyMintable?this.lazyMintable.updateMetadata.prepare(t,r):W(this.updatableMetadata,j).update.prepare(t,r));async update(t,r){return this.updateMetadata(t,r)}claim=p(async(t,r)=>this.claimTo.prepare(await this.contractWrapper.getSignerAddress(),t,r));claimTo=p(async(t,r,a)=>{const e=this.claimWithConditions,s=this.claimCustom,n=this.claimZora;if(e)return e.to.prepare(t,r,a);if(s)return s.to.prepare(t,r,a);if(n)return n.to.prepare(t,r,a);throw new O(U)});async getClaimTransaction(t,r,a){const e=this.claimWithConditions,s=this.claimCustom;if(e)return e.conditions.getClaimTransaction(t,r,a);if(s)return s.getClaimTransaction(t,r,a);throw new O(U)}async totalClaimedSupply(){const t=this.contractWrapper;if(C("totalMinted",t))return this.contractWrapper.read("totalMinted",[]);if(C("nextTokenIdToClaim",t))return this.contractWrapper.read("nextTokenIdToClaim",[]);throw new Error("No function found on contract to get total claimed supply")}async totalUnclaimedSupply(){const[t,r]=await Promise.all([this.nextTokenIdToMint(),this.totalClaimedSupply()]);return t.sub(r)}get claimConditions(){return W(this.claimWithConditions,J).conditions}get tieredDrop(){return W(this.tieredDropable,G)}get signature(){return W(this.signatureMintable,H)}get revealer(){return W(this.lazyMintable?.revealer,K)}get sharedMetadata(){return W(this.erc721SharedMetadata,X)}async getTokenMetadata(t){const r=await this.contractWrapper.read("tokenURI",[t]);if(!r)throw new st;return Tt(t,r,this.storage)}async nextTokenIdToMint(){if(C("nextTokenIdToMint",this.contractWrapper)){let t=await this.contractWrapper.read("nextTokenIdToMint",[]);return C("startTokenId",this.contractWrapper)&&(t=t.sub(await this.contractWrapper.read("startTokenId",[]))),t}else{if(C("totalSupply",this.contractWrapper))return await this.contractWrapper.read("totalSupply",[]);throw new Error("Contract requires either `nextTokenIdToMint` or `totalSupply` function available to determine the next token ID to mint")}}detectErc721Enumerable(){if(l(this.contractWrapper,"ERC721Supply")||C("nextTokenIdToMint",this.contractWrapper))return new Zt(this,this.contractWrapper)}detectErc721Mintable(){if(l(this.contractWrapper,"ERC721Mintable"))return new xt(this,this.contractWrapper,this.storage)}detectErc721Burnable(){if(l(this.contractWrapper,"ERC721Burnable"))return new Nt(this.contractWrapper)}detectErc721LazyMintable(){if(l(this.contractWrapper,"ERC721LazyMintable"))return new Ut(this,this.contractWrapper,this.storage)}detectErc721TieredDrop(){if(l(this.contractWrapper,"ERC721TieredDrop"))return new Qt(this,this.contractWrapper,this.storage)}detectErc721SignatureMintable(){if(l(this.contractWrapper,"ERC721SignatureMintV1")||l(this.contractWrapper,"ERC721SignatureMintV2"))return new Yt(this.contractWrapper,this.storage)}detectErc721ClaimableWithConditions(){if(l(this.contractWrapper,"ERC721ClaimConditionsV1")||l(this.contractWrapper,"ERC721ClaimConditionsV2")||l(this.contractWrapper,"ERC721ClaimPhasesV1")||l(this.contractWrapper,"ERC721ClaimPhasesV2"))return new vt(this,this.contractWrapper,this.storage)}detectErc721Claimable(){if(l(this.contractWrapper,"ERC721ClaimCustom"))return new Ft(this,this.contractWrapper)}detectErc721ClaimableZora(){if(l(this.contractWrapper,"ERC721ClaimZora"))return new Pt(this,this.contractWrapper)}detectErc721SharedMetadata(){if(l(this.contractWrapper,"ERC721SharedMetadata"))return new Ot(this.contractWrapper,this.storage)}detectErc721LoyaltyCard(){if(l(this.contractWrapper,"ERC721LoyaltyCard"))return new Lt(this.contractWrapper)}detectErc721UpdatableMetadata(){if(l(this.contractWrapper,"ERC721UpdatableMetadata"))return new _t(this.contractWrapper,this.storage)}}export{Yt as E,rr as a};
